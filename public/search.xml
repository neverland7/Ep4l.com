<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hackergame 2020 尝试</title>
      <link href="2021/01/15/hackergame-2020-attempt/"/>
      <url>2021/01/15/hackergame-2020-attempt/</url>
      
        <content type="html"><![CDATA[<p>今天偶然刷到Hackergame的相关内容，以前从来不知道有这种东西，准备尝试做题并且学习一下。</p><p>网址：<a href="https://hack.lug.ustc.edu.cn/">https://hack.lug.ustc.edu.cn/</a></p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><img src="/images/hackergame-2020-attempt/image-20210116000201094.png" alt=""></p><p>要求提取一个flag，但是滑条的步长为0.00001，js代码还会把1略过，不可能滑到1</p><p><img src="/images/hackergame-2020-attempt/image-20210116000645177.png" alt="">点击提交发现是用get请求，URL变为<code>http://202.38.93.111:10000/?number=0.01145</code>，可直接改为1<br>也可在控制台直接使用<code>$('#number')[0].value = 1;</code></p><h2 id="猫咪问答"><a href="#猫咪问答" class="headerlink" title="猫咪问答++"></a>猫咪问答++</h2><p><img src="/images/hackergame-2020-attempt/image-20210116001306225.png" alt=""></p><p>1.不知道</p><p>2.搜索找到<code>https://tools.ietf.org/html/rfc1149</code>得到值：256</p><p>3.查找网络得到值：9</p><p>4.查找地图得到值：9</p><p>5.查找网络得到值：17098</p><p>1.参考<code>https://www.cnblogs.com/pu369/p/12201707.html</code>和<code>https://blog.skk.moe/post/hackergame-2020-write-up</code><br>得到：12</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">23</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'q1'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'q2'</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'q3'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'q4'</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'q4'</span><span class="token punctuation">,</span> <span class="token number">17098</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://202.38.93.111:10001/'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      body<span class="token operator">:</span> formData<span class="token punctuation">,</span>      method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resp</span> <span class="token operator">=&gt;</span> resp<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">text</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'没有全部答对，不能给你 flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2048"><a href="#2048" class="headerlink" title="2048"></a>2048</h2><p><img src="/images/hackergame-2020-attempt/image-20210116011522357.png" alt=""></p><p>游戏很好玩，不过我是菜鸟，通过不了</p><p><img src="/images/hackergame-2020-attempt/image-20210116012914685.png" alt=""></p><p>拦截到了一个请求，打开js</p><p><img src="/images/hackergame-2020-attempt/image-20210116013020557.png" alt=""></p><p><img src="/images/hackergame-2020-attempt/image-20210116013632841.png" alt=""></p><p>访问<code>http://202.38.93.111:10005/getflxg?my_favorite_fruit=banana</code>通过</p><h2 id="一闪而过的-Flag"><a href="#一闪而过的-Flag" class="headerlink" title="一闪而过的 Flag"></a>一闪而过的 Flag</h2><blockquote><p>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</p></blockquote><p>把文件拖入cmd即可</p><p><img src="/images/hackergame-2020-attempt/image-20210116014242933.png" alt=""></p><h2 id="从零开始的记账工具人"><a href="#从零开始的记账工具人" class="headerlink" title="从零开始的记账工具人"></a>从零开始的记账工具人</h2><blockquote><p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p><p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p><p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p><p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p></blockquote><p>文件已经下载不了了。。。。。</p><h2 id="超简单的世界模拟器"><a href="#超简单的世界模拟器" class="headerlink" title="超简单的世界模拟器"></a>超简单的世界模拟器</h2><blockquote><p>你知道生命游戏（Conway’s Game of Life）吗？</p><p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p><p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p><p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p><p>注: 你的输入是 15 行文本，每行由 15 个 0 或者 1 组成，代表该区域的内容。</p></blockquote><p>瞎试了几次居然过了</p><h2 id="从零开始的火星文生活"><a href="#从零开始的火星文生活" class="headerlink" title="从零开始的火星文生活"></a>从零开始的火星文生活</h2><blockquote><p>脦脪鹿楼脝脝脕脣 拢脠拢谩拢茫拢毛拢氓拢貌拢莽拢谩拢铆拢氓 碌脛路镁脦帽脝梅拢卢脥碌碌陆脕脣脣眉脙脟碌脛 拢忙拢矛拢谩拢莽拢卢脧脰脭脷脦脪掳脩 拢忙拢矛拢谩拢莽 路垄赂酶脛茫拢潞<br>拢忙拢矛拢谩拢莽拢没拢脠拢麓拢枚拢鲁拢脽拢脝拢玫拢脦拢脽拢梅拢卤拢脭拢猫拢脽拢鲁拢卯拢茫拢掳拢盲拢卤拢卯拢莽拢脽拢麓拢脦拢盲拢脽拢盲拢鲁拢茫拢掳拢脛拢卤拢卯拢脟拢脽拢鹿拢帽拢脛拢虏拢脪拢赂拢猫拢贸拢媒<br>驴矛脠楼卤脠脠眉脝陆脤篓脤谩陆禄掳脡拢隆<br>虏禄脪陋脭脵掳脩脮芒路脻脨脜脧垄脳陋路垄赂酶脝盲脣没脠脣脕脣拢卢脪陋脢脟卤禄路垄脧脰戮脥脭茫赂芒脕脣拢隆</p></blockquote><p>好家伙，搞了半天没解出来，不过得到了常用乱码表</p><p><img src="/images/hackergame-2020-attempt/image-20210116021901318.png" alt="这可得好好记得"></p><p>标准答案：</p><blockquote><p>下载附件之后如直接用 GBK 打开，那就真的是题面里说的“夹杂着日语和数字的火星文”了。恭喜掉进坑，乱码又多了一层（逃</p><p>用 UTF-8 打开，看到形如“脦脪鹿楼”的文本，推断是上图中的“古文码”乱码。但是“古文码”明明是“以 GBK 方式读取 UTF-8 编码”造成的，看来“脦脪鹿楼”本来应当是 GBK下看到的结果，却又被存成了 UTF-8。所以第一步是用 GBK 重新编码文本“脦脪鹿楼…”。</p><p>然后用 UTF-8 打开，看到形如“ÎÒ¹¥ÆÆÁË”的文本，推断是上图中的“拼音码”乱码。“拼音码”是“以 ISO8859-1 方式读取 GBK 编码”，而现在文本的编码是 UTF-8。所以接下应当用 ISO8859-1 重新编码文本“ÎÒ¹¥ÆÆÁË…”。</p><p>然后用 GBK 打开，就能看到可读的汉字和 flag 了（原始编码确实是 GBK 呢！）。不过这里的 flag 全部是从 ASCII 字符转成的全角字符，不能直接复制使用。可以手动替换成 ASCII 字符，或者用其他简便方法变回 ASCII 字符。</p><p><a href="https://github.com/USTC-Hackergame/hackergame2020-writeups/blob/master/official/从零开始的火星文生活/src/generate_and_solve.py">源代码</a> 中也给出了一个全角-&gt;半角的函数。</p><p>方法一（不写代码）</p><p>例如用 VSCode 的“Select Encoding”功能。</p><p>步骤（开始时 UTF-8 打开题目附件）：</p><ol><li>Save with Encoding -&gt; GBK</li><li>Reopen with Encoding -&gt; UTF-8</li><li>Save with Encoding -&gt; ISO8859-1</li><li>Reopen with Encoding -&gt; GBK</li></ol></blockquote><p>后面的感觉自己也不会做了，先这样，有时间再看吧</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Hackergame </tag>
            
            <tag> 信安 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++语言程序设计（6-12章）</title>
      <link href="2021/01/11/cpp2/"/>
      <url>2021/01/11/cpp2/</url>
      
        <content type="html"><![CDATA[<center><span style="color:blue;font-size:15px">2021/1/10</span></center><h2 id="第6章-数组、指针与字符串"><a href="#第6章-数组、指针与字符串" class="headerlink" title="第6章 数组、指针与字符串"></a>第6章 数组、指针与字符串</h2><h3 id="6-1-数组"><a href="#6-1-数组" class="headerlink" title="6.1 数组"></a>6.1 数组</h3><h4 id="6-1-2-数组的存储与初始化"><a href="#6-1-2-数组的存储与初始化" class="headerlink" title="6.1.2 数组的存储与初始化"></a>6.1.2 数组的存储与初始化</h4><p><strong>1.数组的存储</strong><br>数组元素在内存中是顺序、连续存储的。数组元素在内存中占据一组连续的存储单元，逻辑上相邻的元素在物理地址上也是相邻的。 </p><p><strong>2.数组的初始化</strong><br>数组的初始化就是在声明数组时给部分或全部元素赋值。<br>声明数组时如果列成全部元素的初值，可以不用说明元素个数：<br><em>int a[]={1,1,1};</em><br>当然，也可以只对元素中的部分元素进行初始化，这种初始化只能针对前若干元素：<br><em>float fa[5]={1.0, 2.0, 3.0};</em></p><p><strong>细节：</strong>当指定的初值个数小于数组大小时， 剩下的数组元素会被赋予0值。若定义数组时没有指定任何一个元素的初值，对于静态生存期的数组，每个元素仍然会被赋予0值；但对于动态生存期的数组，每个元素的初值都是不确定的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//动态生存期</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp2/image-20210110111504396.png" alt="动态生存期"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//静态生存期</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp2/image-20210110111610294.png" alt="静态生存期"></p><center><span style="color:blue;font-size:15px">2021/1/11</span></center><h4 id="6-1-3-数组作为函数参数"><a href="#6-1-3-数组作为函数参数" class="headerlink" title="6.1.3 数组作为函数参数"></a>6.1.3 数组作为函数参数</h4><p>使用数组名传递数据时，传递的是地址。<br><strong>细节：</strong>把数组作为参数时，一般不指定数组第一维的大小，即使指定，也会被忽略。</p><h4 id="6-1-4-对象数组"><a href="#6-1-4-对象数组" class="headerlink" title="6.1.4 对象数组"></a><strong>6.1.4 对象数组</strong></h4><p>数组的元素不仅可以是基本数据类型，也可以是自定义类型。</p><h4 id="6-1-5-程序实例"><a href="#6-1-5-程序实例" class="headerlink" title="6.1.5 程序实例"></a>6.1.5 程序实例</h4><p>例6-4 利用Point类进行点的线性拟合。</p><p>考虑一个用n个数据点拟合成直线的问题，直线模型为</p><script type="math/tex; mode=display">y(x)=ax+b</script><p>这个问题称为线性回归。设变量y随自变量x变化，给定n组观测数据（$x_i,y_i$)，用直线来拟合这些点，其中a，b是直线的斜率和截距，称为回归系数。</p><p>为确定回归系数，通常采用最小二乘法，即要使下式达到最小。</p><script type="math/tex; mode=display">Q=\sum_{i=0}^{n-1}{[y_i-(ax_i+b)]^2}</script><p>根据极值定理，a和b满足下列方程：</p><script type="math/tex; mode=display">\frac{\partial Q}{\partial a}=2\sum_{i=0}^{n-1}{[y_i-(ax_i+b)](-x_i)}=0</script><script type="math/tex; mode=display">\frac{\partial Q}{\partial b}=2\sum_{i=0}^{n-1}{[y_i-(ax_i+b)](-1)}=0</script><p>解得：</p><script type="math/tex; mode=display">a=\frac{L_{xy}}{L_{xx}}=\frac{\sum_{i=0}^{n-1}{(x_i-\overline{x})(y_i-\overline{y})}}{\sum_{i=0}^{n-1}{(x_i-\overline{x})^2}}</script><script type="math/tex; mode=display">b=\overline{y}-a\overline{x}</script><p>相关系数r可以判断一组数据线性相关的密切程度，定义为：</p><script type="math/tex; mode=display">r=\frac{L_{xy}}{\sqrt{L_{xx}L_{yy}}}</script><script type="math/tex; mode=display">L_{yy}=\sum_{i=0}^{n-1}{(y_i-\overline{y})^2}</script><p>r的绝对值越接近1，表示数据的线性关系越好</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Point.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_POINT_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">_POINT_H</span></span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">float</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">float</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//6_4.cpp 最小二乘法做线性拟合</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Point.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//直线线性担合,pointe为各点nPoint为点数</span><span class="token keyword">float</span> <span class="token function">lineFit</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point points<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> nPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">float</span> avgX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> avgY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">float</span> lxx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lyy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lxy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nPoint<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>avgX <span class="token operator">+=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> nPoint<span class="token punctuation">;</span>avgY <span class="token operator">+=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> nPoint<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nPoint<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>lxx <span class="token operator">+=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> avgX<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> avgX<span class="token punctuation">)</span><span class="token punctuation">;</span>lyy <span class="token operator">+=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> avgY<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> avgY<span class="token punctuation">)</span><span class="token punctuation">;</span>lxy <span class="token operator">+=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> avgX<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> avgY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span> <span class="token string">"This line can be fitted by y=ax+b."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> lxy <span class="token operator">/</span> lxx <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//输出回归系数a</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b="</span> <span class="token operator">&lt;&lt;</span> avgY <span class="token operator">-</span> avgX <span class="token operator">*</span> lxy <span class="token operator">/</span> lxx <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//输出回归系数b</span><span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>lxy <span class="token operator">/</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>lxx <span class="token operator">*</span> lyy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回相关系数r</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Point p<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">float</span> r <span class="token operator">=</span> <span class="token function">lineFit</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Line coefficient r="</span> <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp2/image-20210111162503679.png" alt="结果"></p><p>这个程序的缺点是可以处理的数据点数是固定的，由Point类对象数组的大小决定，这在实际使用中是一个很大的遗憾，在后面的章节中，会对本程序进行改造，以适应任意多个数据的处理。</p><h3 id="6-2-指针"><a href="#6-2-指针" class="headerlink" title="6.2 指针"></a>6.2 指针</h3><h4 id="6-2-1-内存空间的访问方式"><a href="#6-2-1-内存空间的访问方式" class="headerlink" title="6.2.1 内存空间的访问方式"></a>6.2.1 内存空间的访问方式</h4><p>每个字节是一个基本内存单元，有一个地址。<br>在C++中有专门用来存放内存单元地址的变量类型，这就是指针类型。</p><h4 id="6-2-2-指针变量的声明"><a href="#6-2-2-指针变量的声明" class="headerlink" title="6.2.2 指针变量的声明"></a>6.2.2 指针变量的声明</h4><p><strong>疑问：</strong>为什么在声明指针变量时要指出它所指的对象是什么类型呢？<br>限定对变量可以进行的运算及其运算规则。</p><h4 id="6-2-3-与地址相关的运算”-”和“-amp-”"><a href="#6-2-3-与地址相关的运算”-”和“-amp-”" class="headerlink" title="6.2.3 与地址相关的运算”*”和“&amp;”"></a>6.2.3 与地址相关的运算”*”和“&amp;”</h4><p>“*”称为指针运算符，也称解析（dereference），表示获取指针所指向的变量的值。<br>“&amp;”称为取地址运算符，用来得到一个对象的地址。<br>必须注意，“*”和“&amp;”在声明语句中和执行语句中其含义是不同的，它们作为一元运算符和作为二元运算符时含义也是不同的。</p><h4 id="6-2-4-指针的赋值"><a href="#6-2-4-指针的赋值" class="headerlink" title="6.2.4 指针的赋值"></a>6.2.4 指针的赋值</h4><p>可以使用一个已经赋值的指针去初始化另一个指针，这就是说，可以使多个指针指向同一个变量。<br>数组名称实际上就是一个不能被赋值的指针，即指针常量。</p><p>关于指针的类型，还应该注意以下几点。<br>（1）可以声明<strong>指向常量的指针</strong>，此时不能通过指针来改变所指对象的值，但指针本身可以改变，可以指向另外的对象。例如:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>pl<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//pl是指向常量的指针</span><span class="token keyword">int</span> b<span class="token punctuation">;</span>pl<span class="token operator">=</span><span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span class="token comment">//正确，pl本身的值可以改变</span><span class="token operator">*</span>pl<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//编译时出错，不能通过pl改变所指的对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）可以声明<strong>指针类型的常量</strong>，这时指针本身的值不能被改变。例如:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> p2<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>p2<span class="token operator">=</span><span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span class="token comment">//错误，p2是指针常量，值不能改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（3）一般情况下，指针的值只能赋给相同类型的指针。但是有一种特殊的 <strong>void类型指针</strong>，可以存储任何类型的对象地址，就是说任何类型的指针都可以赋值给void类型的指针变量。经过使用类型显式转换，通过void类型的指针便可以访问任何类型的数据。<br><strong>提示：</strong>void 指针一般只在指针所指向的数据类型不确定时使用。</p><h4 id="6-2-5-指针运算"><a href="#6-2-5-指针运算" class="headerlink" title="6.2.5 指针运算"></a>6.2.5 指针运算</h4><p>*(pl + nl)表示pI当前所指位置后方第nl个数的内容，它也可以写作pI[nl],这与*(pl + nl)的写法是完全等价的，同样，*(pl - nl)也可以写作pI[-nl]。</p><p><img src="/images/cpp2/image-20210111181928035.png" alt="指针的算术运算"></p><p><strong>提示：</strong>指针算术运算的不慎使用会导致指针指向无法预期的地址，从而造成不确定的结果，因此指针的算术运算一定要慎用。</p><p>指针变量的关系运算指的是指向相同类型数据的指针之间进行的关系运算。如果两个相同类型的指针相等，就表示这两个指针是指向同一个地址。不同类型的指针之间或指针与非0整数之间的关系运算是毫无意义的。但是指针变量可以和整数0进行比较，0专用于表示空指针，也就是一个不指向任何有效地址的指针。</p><p><strong>细节：</strong>空指针也可以用NULL来表示，NULL是一个在很多头文件中都有定义的宏，被定义为0。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>习惯：</strong>如果不便于用一个有效地址给一个指针变量赋初值，那么应当用0作为它的初值，从而避免指向不确定地址的指针出现。</p><h4 id="6-2-6-用指针处理数组元素"><a href="#6-2-6-用指针处理数组元素" class="headerlink" title="6.2.6 用指针处理数组元素"></a>6.2.6 用指针处理数组元素</h4><p><strong>细节：</strong>把数组作为函数的形参，等价于把指向数组元素类型的指针作为形参。例如，下面3个写法，出现在形参列表中都是等价的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-2-7-指针数组"><a href="#6-2-7-指针数组" class="headerlink" title="6.2.7 指针数组"></a>6.2.7 指针数组</h4><p>如果一个数组的每个元素都是指针变量，这个数组就是指针数组。指针数组的每个元素都必须是同类型的指针。例如 int *pa[3];声明了一个int类型的指针数组pa，其中有3个元素，每个元素都是一个指向int类型数<br>据的指针。由于指针数组的每个元素都是一个指针，必须先赋值后引用，因此，声明数组之后，对指针元素赋初值是必不可少的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//6_8.cpp 利用指针数组输出单位矩阵</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> line1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> line2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> line3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//定义整型指针数组并初始化</span><span class="token keyword">int</span><span class="token operator">*</span> pLine<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> line1<span class="token punctuation">,</span>line2<span class="token punctuation">,</span> line3 <span class="token punctuation">}</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Matrix test:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> pLine<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp2/image-20210111235748905.png" alt="指针数组与二维数组的区别"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//6_9.cpp 二维数组举例</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> array2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>array2 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><span style="color:blue;font-size:15px">2021/1/12</span></center><h4 id="6-2-8-用指针作为函数参数"><a href="#6-2-8-用指针作为函数参数" class="headerlink" title="6.2.8 用指针作为函数参数"></a>6.2.8 用指针作为函数参数</h4><p>例6-10：读入3个浮点数，将整数部分和小数部分分别输出。<br>程序由主函数和一个进行浮点数分解的子函数组成，浮点数在子函数中分解之后，将整数部分和小数部分传递回主函数中输出。可以想象，如果直接使用整型和浮点型变量，形参在子函数中的变化根本就无法传递到主函数，因此采用指针作为函数的参数。源代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//6 10.cpp 用指针作为函数参数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//将实数x分成整数部分和小数部分，形参intPart、 fracPart是指针</span><span class="token keyword">void</span> <span class="token function">splitFloat</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> intPart<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">*</span> fracPart<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">*</span>intPart <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取x的整数部分</span><span class="token operator">*</span>fracPart <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token operator">*</span>intPart<span class="token punctuation">;</span><span class="token comment">//取x的小数部分</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter 3 float point numbers:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">float</span> x<span class="token punctuation">,</span>f<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span><span class="token function">splitFloat</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//变量地址作为实参</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Integer Part="</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span><span class="token string">" Fraction Part="</span><span class="token operator">&lt;&lt;</span> f<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个程序中，使用引用作为形参也可以达到同样目的。</p><h4 id="6-2-9-指针型函数"><a href="#6-2-9-指针型函数" class="headerlink" title="6.2.9 指针型函数"></a>6.2.9 指针型函数</h4><p>除了void 类型的函数之外，函数在调用结束之后都要有返回值，指针也可以是函数的返回值。当一个函数的返回值是指针类型时，这个函数就是指针型函数。使用指针型函数的最主要目的就是要在函数结束时把大量的数据从被调函数返回到主调函数中，而通常非指针型函数调用结束后，只能返回一个变量或者对象。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">funcion</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    函数体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-2-10-指向函数的指针"><a href="#6-2-10-指向函数的指针" class="headerlink" title="6.2.10 指向函数的指针"></a>6.2.10 指向函数的指针</h4><p>在程序运行时，不仅数据要占据内存空间，执行程序的代码也被调入内存并占据一定的空间。每一个函数都有函数名，实际上这个函数名就表示函数的代码在内存中的起始地址。由此看来，调用函数的通常形式“函数名(参数表)”的实质就是“函数代码首地址(参数表)”。</p><p>函数指针就是专门用来存放函数代码首地址的变量。在程序中可以像使用函数名一样使用指向函数的指针来调用函数。也就是说一旦函数指针指向了某个函数，它与函数名便具有同样的作用。函数名在表示函数代码起始地址的同时，也包括函数的返回值类型和参数的个数、类型、排列次序等信息。因此在通过函数名调用函数时，编译系统能够自动检查实参与形参是否相符，用函数的返回值参与其他运算时，能自动进行类型一致性检查。</p><p>声明一个函数指针时，也需要说明函数的返回值、形式参数列表,其一般语法如下:<br>数据类型(*函数指针名) (形参表)</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//6_11.cpp函数指针实例</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printStuff</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"This is the print stuff function."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token keyword">float</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The data to be listed is "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printFloat</span><span class="token punctuation">(</span><span class="token keyword">float</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The data to be printed is "</span> <span class="token operator">&lt;&lt;</span> data <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">float</span> PI <span class="token operator">=</span> <span class="token number">3.14159f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">float</span> TWO_PI <span class="token operator">=</span> PI <span class="token operator">*</span> <span class="token number">2.0f</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>functionPointer<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printStuff</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>functionPointer <span class="token operator">=</span> printStuff<span class="token punctuation">;</span><span class="token function">functionPointer</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>functionPointer <span class="token operator">=</span> printMessage<span class="token punctuation">;</span><span class="token function">functionPointer</span><span class="token punctuation">(</span>TWO_PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">functionPointer</span><span class="token punctuation">(</span><span class="token number">13.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>functionPointer <span class="token operator">=</span> printFloat<span class="token punctuation">;</span><span class="token function">functionPointer</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printFloat</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-11-对象指针"><a href="#6-2-11-对象指针" class="headerlink" title="6.2.11 对象指针"></a>6.2.11 对象指针</h4><h5 id="1-对象指针的一般概念"><a href="#1-对象指针的一般概念" class="headerlink" title="1.对象指针的一般概念"></a>1.对象指针的一般概念</h5><p>和基本类型的变量一样，每一个对象在初始化之后都会在内存中占有一定的空间。因此，既可以通过对象名，也可以通过对象地址来访问一个对象。虽然对象同时包含了数虽然对象同时包含了数据和函数两种成员，但与一般变量略有不同，对象所占据的内存空间只是用于存放数据成员的，函数成员不在每一个对象中存储副本。对象指针就是用于存放对象地址的变量。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">对象指针名<span class="token operator">-&gt;</span>成员名<span class="token punctuation">(</span><span class="token operator">*</span>对象指针名<span class="token punctuation">)</span><span class="token punctuation">.</span>成员名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两种访问形式是等价的。</p><h5 id="2-this指针"><a href="#2-this指针" class="headerlink" title="2.this指针"></a>2.this指针</h5><p>this指针是一个隐含于每个类的非静态成员函数中的特殊指针(包括构造函数和析构函数)，它用于指向正在被成员函数操作的对象。</p><p><strong>细节：</strong>this指针实际上是类成员函数的一个隐含参数。 在调用类的成员函数时，目的对象的地址会自动作为该参数的值，传递给被调用的成员函数，这样被调函数就能够通过this指针来访问目的对象的数据成员。对于常成员函数来说，这个隐含的参数是常指针类型的。</p><p>this是一个指针常量，对于常成员函数，this同时又是一个指向常量的指针。在成员函数中， 可以使用*this来标识正在调用该函数的对象。</p><p><strong>提示：</strong>当局部作用域中声明了与类成员同名的标识符时，对该标识符的直接引用代表的是局部作用城中所声明的标识符，这时为了访问该类成员，可以通过this指针。</p><h5 id="3-指向类的非静态成员的指针"><a href="#3-指向类的非静态成员的指针" class="headerlink" title="3.指向类的非静态成员的指针"></a>3.指向类的非静态成员的指针</h5><p>类的成员自身也是一些变量、函数或者对象等，因此也可以直接将它们的地址存放到一个指针变量中，这样，就可以使指针直接指向对象的成员 ，进而可以通过这些指针访问对象的成员。</p><p>声明指针语句的一般形式为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">类型说明符 类名<span class="token operator">::</span><span class="token operator">*</span>指针名<span class="token punctuation">;</span>  <span class="token comment">//声明指向数据成员的指针</span>类型说明符 <span class="token punctuation">(</span>类名<span class="token operator">::</span> <span class="token operator">*</span>指针名<span class="token punctuation">)</span><span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明指向函数成员的指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对成员指针赋值的一般语法形式为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">指针名<span class="token operator">=</span><span class="token operator">&amp;</span>类名<span class="token operator">::</span>数据成员名<span class="token punctuation">;</span>   <span class="token comment">//对数据成员指针赋值</span>指针名<span class="token operator">=</span><span class="token operator">&amp;</span>类名<span class="token operator">::</span>函数成员名<span class="token punctuation">;</span>  <span class="token comment">//对函数成员赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：</strong>对类成员取地址时，也要遵守访问权限的约定，也就是说，在一个类的作用域之外不能够对它的私有成员取地址。</p><p><strong>注意：</strong>常成员函数与普通成员函数具有不同的类型，因此能够被常成员函数赋值的指针，需要在声明时明确写出const关键字。</p><p>类是通过对象而实例化的，在声明类的对象时才会为具体的对象分配内存空间，这时只要将对象在内存中的起始地址与成员指针中存放的相对偏移结合起来就可以访问到对象的数据成员了。访问数据成员时，这种结合可通过以下两种语法形式实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">对象名<span class="token punctuation">.</span><span class="token operator">*</span>类成员指针名对象指针名<span class="token operator">-&gt;</span><span class="token operator">*</span>类成员指针名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个普通函数的函数名就表示它的起始地址，将起始地址赋给指针，就可以通过指针调用函数。类的成员函数虽然并不在每个对象中复制一份副本，但是由于需要确定this指针，因而必须通过对象来调用非静态成员函数。因此经过上述对成员函数指针赋值以后，也还不能用指针直接调用成员函数，而是需要首先声明类的对象，然后用以下形式的语句利用指针调用成员函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>对象名<span class="token punctuation">.</span><span class="token operator">*</span>类成员指针名<span class="token punctuation">)</span><span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><span class="token punctuation">(</span>对象指针名<span class="token operator">-&gt;</span><span class="token operator">*</span>类成员指针名<span class="token punctuation">)</span><span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//6_13.cpp 指向类的非静态成员的指针 &amp; 访问对象的共有函数的不同方法</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Point <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Point<span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span>Point<span class="token operator">::</span> <span class="token operator">*</span> funcPtr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Point<span class="token operator">::</span>getX<span class="token punctuation">;</span><span class="token comment">//定义成员函数指针并初始化</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token operator">*</span>funcPtr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//(1)使用成员函数指针和对象名访问成员函数</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span><span class="token operator">*</span>funcPtr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//(2)使用成员函数指针和对象指针访问成员函数</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//(3)使用对象名访问成员函数</span>cout <span class="token operator">&lt;&lt;</span> p1<span class="token operator">-&gt;</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//(4)使用对象指针访问成员函数</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-指向类的静态成员的指针"><a href="#4-指向类的静态成员的指针" class="headerlink" title="4.指向类的静态成员的指针"></a>4.指向类的静态成员的指针</h5><p>对类的静态成员的访问是不依赖于对象的，因此可以用普通的指针来指向和访问静态成员。</p><center><span style="color:blue;font-size:15px">2021/1/13</span></center><h3 id="6-3-动态内存分配"><a href="#6-3-动态内存分配" class="headerlink" title="6.3 动态内存分配"></a>6.3 动态内存分配</h3><p>在C++中，动态内存分配技术可以保证程序在运行过程中按照实际需要申请适量的内存，使用结束后还可以释放，这种在程序运行过程中申请和释放的存储单元也称为堆对象，申请和释放过程一般称为建立和删除。<br>在C++程序中建立和删除堆对象使用两个运算符: new和delete。<br>运算符new的功能是动态分配内存，或者称为动态创建堆对象,语法形式为:<br>new 数据类型(初始化参数列表);<br>该语句在程序运行过程中申请分配用于存放指定类型数据的内存空间，并根据初始化参数列表中给出的值进行初始化。如果内存申请成功，new运算便返回一个指向新分配内存首地址的类型的指针，可以通过这个指针对堆对象进行访问；如果申请失败，会抛出异常(有关异常,将在第12章介绍)。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> point<span class="token punctuation">;</span>point<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>细节：</strong>在用new 建立一个类的对象时，如果该类存在用户定义的默认构造函数，则“new T”和“new T()”这两种写法的效果是相同的，都会调用这个默认构造函数。但若用户未定义默认构造函数,使用“new T”创建对象时，会调用系统生成的隐含的默认构造函数;使用“new T()”创建对象时，系统除了执行默认构造函数会执行的那些操作外，还会为基本数据类型和指针类型的成员用0赋初值，而且这一过程是递归的。 也就是说，如果该对象的某个成员对象也没有用户定义的默认构造函数，那么对该成员对象的基本数据类型和指针类型的成员，同样会被以0赋初值。(基本数据类型和数组也一样)</p><p>运算符delete用来删除由new建立的对象，释放指针所指向的内存空间。格式为:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">delete</span> 指针名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong>用new分配的内存，必须用delete 加以释放，否则会导致动态分配的内存无法回收，使得程序占据的内存越来越大，这叫做“内存泄漏”。</p><p>使用运算符new也可以创建<strong>数组类型</strong>的对象，创建一维数组的语法形式为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">new</span> 类型名 <span class="token punctuation">[</span>数组长度<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是用new建立的数组,用delete删除时在指针名前面要加“[]”,格式如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 指针名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center><span style="color:blue;font-size:15px">2021/1/14</span></center><p>在动态数组类中，通过类的成员函数访问数组元素，可以在每次访问之前检查一下下标是否越界，使得使得数组下标越界的错误能够及早被发现<strong><span style="color:green;font-size:15px">(实际应用可直接使用vector)</span></strong> 。这种检查，可以通过C++的assert来进行。assert 只在调试模式下生效，一般用assert 只是检查程序本身的逻辑错误，而用户的不当输入造成的错误，则应当用其他方式加以处理。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//6_18.cpp 动态数组类   将动态数组封装成一个类</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cassert&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Default Constructor called."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Constructor called."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Destructor called."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> newX<span class="token punctuation">,</span> <span class="token keyword">int</span> newY<span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> newX<span class="token punctuation">;</span>y <span class="token operator">=</span> newY<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ArrayOfPoints</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">ArrayOfPoints</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">size</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>points <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">ArrayOfPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Deleting..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">;</span><span class="token punctuation">}</span>Point <span class="token operator">&amp;</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//返回一个对象的引用，确保正确更改</span><span class="token function">assert</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果数组下标越界，程序终止</span><span class="token keyword">return</span> points<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>Point<span class="token operator">*</span> points<span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> count<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please enter the count of points: "</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> count<span class="token punctuation">;</span>ArrayOfPoints <span class="token function">points</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象数组</span>points<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问数组元索的成员</span>points<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//访问数组元素的成员</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp2/image-20210114012043817.png" alt="运行结果"></p><p>创建和删除对象数组的过程都由ArrayOfPoints类的构造函数和析构函数完成。这虽然使main()函数更为简洁，但是对数组元素的访问形式“points.element(0)”却显得啰嗦。如果希望像使用普通数组样,通过下标操作符“[ ]”来访问数组元素，就需要对下标操作符进行重载，这将在第9章详细介绍。</p><p>用new操作也可以创建多维数组，其中第1维长度可以是任何结果为正整数的表达式，而其他各维数组长度必须是结果为正整数的常量表达式。如果内存申请成功.new运算返回一个指向新分配内存的首地址的指针。例如，下列语句</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span><span class="token operator">*</span> fp<span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会产生错误，正确的写法应该是：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span><span class="token punctuation">(</span><span class="token operator">*</span>cp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如此得到的指针cp，既可以作为指针使用，也可以像一个三维数组名一样使用。</p><h3 id="6-4-用vector创建数组对象"><a href="#6-4-用vector创建数组对象" class="headerlink" title="6.4 用vector创建数组对象"></a>6.4 用vector创建数组对象</h3><p>无论是静态数组，还是用new动态创建的数组，都难以检测下标越界的错误，在实际应用中常常造成困扰。例6-18 提供了一个很好的例子，它通过将动态数组封装成-一个类，允许在调试状态下访问数组元素时检查下标越界的错误。然而，它只能表示Point类型的动态数组，若要处理其他类型的动态数组，还需创建新的动态数组类，这是很烦琐的重复性工作，事实上,C++标准库也提供了被封装的动态数组一vector，而且这种被封装的数组可以具有各种类型，这就使我们免去了那些重复性工作。vector不是一个类，而是个类模板。模板的概念将在第9章详细介绍，读者通过本章的学习，只需在形式上记住vector的使用方式。</p><p>向量 <strong>vector</strong> 是一种对象实体, 能够容纳许多其他类型相同的元素, 因此又被称为容器。 与string相同，vector 同属于STL(Standard Template Library，标准模板库)中的一种自定义的数据类型，可以广义上认为是数组的增强版。用vector定义动态数组的形式为:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>元素类型<span class="token operator">&gt;</span>数组对象名<span class="token punctuation">(</span>数组长度，元素初值<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>细节：</strong>与普通数组不同的是，用vector定义的数组对象的所有元素都会被初始化。如果数组的元素类型为基本数据类型，则所有元素都会被以0初始化；如果数组元素为类类型，则会调用类的默认构造函数初始化。因此如果以此形式定义的vector动态数组，需要保证作为数组元素的类具有默认构造函数。另外,初值也可以自己指定，但只能为所有元素指定相同初值。</p><p>对vector数组对象元素的访问方式，与普通数组具有相同的形式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">数组对象名<span class="token punctuation">[</span>下标表达式<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是vector数组对象的名字表示的就是一个数组对象，而非数组的首地址，因为数组对象不是数组，而是封装了数组的对象。vector定义的数组对象具有个重要的成员函数size()，它会返回数组的大小。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//6_20.cpp vector应用举例</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//计算数组arr中元素的平均值</span><span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> sum <span class="token operator">/</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">unsigned</span> n<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"n= "</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token function">arr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" real numbers:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Average="</span> <span class="token operator">&lt;&lt;</span> <span class="token function">average</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vector还具有很多其他强大的功能，例如它的大小可以扩展，这些特性都将在第10章详细介绍。</p><center><span style="color:blue;font-size:15px">2021/1/15</span></center><h3 id="6-5-深复制和浅复制"><a href="#6-5-深复制和浅复制" class="headerlink" title="6.5 深复制和浅复制"></a>6.5 深复制和浅复制</h3><p>虽然第4章已经介绍过复制构造函数，但是在此前大多数简单例题中都不需要特别编写复制构造函数，隐含的复制构造函数足以实现对象间数据元素的一一对应复制。因此，读者对于编写复制构造函数的必要性，可能一直存在疑问。其实隐含的复制构造的数并不总是适用的，因为它完成的只是浅复制。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//6_21.cpp 对象的浅复制</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Default Constructor called."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Constructor called."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Destructor called."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> newX<span class="token punctuation">,</span> <span class="token keyword">int</span> newY<span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> newX<span class="token punctuation">;</span>y <span class="token operator">=</span> newY<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ArrayOfPoints</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">ArrayOfPoints</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">size</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>points <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">ArrayOfPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Deleting..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">;</span><span class="token punctuation">}</span>Point<span class="token operator">&amp;</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//返回一个对象的引用，确保正确更改</span><span class="token function">assert</span><span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果数组下标越界，程序终止</span><span class="token keyword">return</span> points<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>Point<span class="token operator">*</span> points<span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> count<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please enter the count of points:"</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> count<span class="token punctuation">;</span>ArrayOfPoints <span class="token function">pointsArray1</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象数组</span>pointsArray1<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pointsArray1<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ArrayOfPoints pointsArray2 <span class="token operator">=</span> pointsArray1<span class="token punctuation">;</span><span class="token comment">//创建对象数组副本</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Copy of pointsArrayl:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Point 0 of array2: "</span> <span class="token operator">&lt;&lt;</span> pointsArray2<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token operator">&lt;&lt;</span> pointsArray2<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Point 1 of array2: "</span> <span class="token operator">&lt;&lt;</span> pointsArray2<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token operator">&lt;&lt;</span> pointsArray2<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>pointsArray1<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pointsArray1<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"After the moving of pointsArrayl:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Point 0 of array2: "</span> <span class="token operator">&lt;&lt;</span> pointsArray2<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token operator">&lt;&lt;</span> pointsArray2<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Point 1 of array2: "</span> <span class="token operator">&lt;&lt;</span> pointsArray2<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token operator">&lt;&lt;</span> pointsArray2<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个程序会出现异常，也就是运行错误。</p><p><img src="/images/cpp2/image-20210115130448555.png" alt="6_21"></p><p>这里建立对象pointsArray2时调用的是默认的复制构造函数，实现对应数据项的直接复制。默认的复制构造函数将两个对象的对应数据项简单复制后，pointsArray1的成员points和pointsArray2的成员points 具有相同的值，也就是说两个指针指向的是同一内存地址，表面上好像完成了复制，但是并没有形成真正的副本。因此当程序中移动pointsArray1中的点时，也影响到了pointsArray2。 这种效果就是“浅复制”。<br>浅复制还有更大的弊病，在程序结束之前pointsArray1和pointsArray2 的析构函数会自动被调用，动态分配的内存空间会被释放。由于两个对象共用了同一块内存空间，因此该空间被两次释放，于是导致运行错误。解决这一问题的方法是编写复制构造函数，实现“深复制”。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//6_22.cpp  对象的深复制</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token comment">//类的定义同6_21</span><span class="token comment">//...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ArrayOfPoints</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">ArrayOfPoints</span><span class="token punctuation">(</span><span class="token keyword">const</span> ArrayOfPoints<span class="token operator">&amp;</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//其他成员同6_21</span><span class="token punctuation">}</span><span class="token class-name">ArrayOfPoints</span><span class="token operator">::</span><span class="token function">ArrayOfPoints</span><span class="token punctuation">(</span><span class="token keyword">const</span> ArrayOfPoints<span class="token operator">&amp;</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>size<span class="token operator">=</span>v<span class="token punctuation">.</span>size<span class="token punctuation">;</span>points <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//同6_21</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp2/image-20210115131228658.png" alt="6_22"></p><p>从这次的运行结果可以看出，程序实现的是深复制：移动pointsArray1中的点不再影响pointsArray2中的点，而且程序结束前分别释放pointsArray1和pointsArray2中的内存空间，也不再引起错误。</p><h3 id="6-6-字符串"><a href="#6-6-字符串" class="headerlink" title="6.6 字符串"></a>6.6 字符串</h3><p>与C语言一样，在C++的基本数据类型变量中没有字符串变量。在C语言中是使用字符型数组来存放字符串的，C++程序中也仍然可以沿用这种办法。不仅如此，标准 C++库中还预定义了string 类。本节就来介绍这两种方法。</p><h4 id="6-6-1-用字符数组存储和处理字符串"><a href="#6-6-1-用字符数组存储和处理字符串" class="headerlink" title="6.6.1 用字符数组存储和处理字符串"></a>6.6.1 用字符数组存储和处理字符串</h4><p>第2章中介绍过，字符串常量是用一对双引号括起来的字符序列。它在内存中的存放形式是，按串中字符的<br>排列次序顺序存放，每个字符占一个字节，并在末尾添加\0作为结尾标记。这实际上是一个隐含创建的类型为char的数组，一个字符串常量就表示这样一个数组的首地址，因此，可以把字符串常量赋给字符串针，由于常量值是不能改的，应将字符串常量赋给指向常量的指针，例如:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> STRING1 <span class="token operator">=</span> <span class="token string">"This is a string."</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span> STRING1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>字符变量也可以用类似方式来表示。 如果创建一个char数组，每个元素存放字符串的一个字符，在末尾放置一个\0，便构成了C++字符串。它的存储方式与字符串常量无异，但由于它是程序员创建的数组，因此可以改写其内容，因而这就是字符串变量而非常量了。这时要注意，用于存放字符串的数组其元素个数应该不小于字符串的长度(字符个数)加1。对字符数组进行初始化赋值时，初值的形式可以是以逗号分隔的ASCII码或字符常量，也可以是整体的字符串常量(这时末尾的\0是隐含的)。 下面列出的语句都可以创建一个初为”program” 的字符串变量，3种写法是等价的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'m'</span>，<span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"program"</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"program"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>尽管对用字符数组表示的字符串进行初始化还比较容易、直观，但进行许多其他字符串操作时却比较麻烦。执行很多字符串操作需要借助cstring头文件中的字符串处理函数。例如将一个字符串的内容复制到另一个字符串需要用strcpy函数，按辞典顺序比较两个的大小需要用strcmp函数，将两个字符串连接起来需要用strcat函数。另外，当字符串长度很不确定时，需要用new来动态创建字符数组。最后还要用delete释放，这些都相当烦琐。C++对这些烦琐的操作进行了封装，形成了string类，可以更加方便地操作字符串。</p><h4 id="6-6-2-string类"><a href="#6-6-2-string类" class="headerlink" title="6.6.2 string类"></a>6.6.2 string类</h4><p>C++标准类库将面向对象的串的概念加入到C++语言中，预定义了字符串类(string类)。string类提供了对字符串进行处理所需要的操作。使用string类需要包含头文件string。string类封装了串的属性并提供了一系列允许访问这此属性的函数。</p><p><strong>细节：</strong>严格地说，string 并非一个独立的类，而是类模板basic_ string的一个特化实例。不过对于string的使用者来说，它的特点与一个类无异，因此可以把它当作一个类来看待。有关模板，将在第9章详细介绍。</p><p>下面简要介绍一下string 类的构造函数、几个常用的成员函数和操作。为了简明起见，函数原型是经过简化的，与头文件中的形式不完全一样。 </p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++语言设计指南（第4版） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github使用学习</title>
      <link href="2021/01/04/github/"/>
      <url>2021/01/04/github/</url>
      
        <content type="html"><![CDATA[<center><span style="color:blue;font-size:15px">2021/1/4</span></center><h2 id="什么是-Github"><a href="#什么是-Github" class="headerlink" title="什么是 Github?"></a>什么是 Github?</h2><p> GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。Github 由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办，除了Git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。 </p><h2 id="1-基本功能"><a href="#1-基本功能" class="headerlink" title="1.基本功能"></a>1.基本功能</h2><p><strong>协同修改</strong><br>多人并行不悖的修改服务器端的同一个文件。<br><strong>数据备份</strong><br>不仅保存目录和文件的当前状态， 还能够保存每一个提交过的历史状态。<br><strong>版本管理</strong><br>在保存每一个版本的文件信息的时候要做到不保存重复数据， 以节约存储空<br>间， 提高运行效率。 这方面 SVN 采用的是增量式管理的方式， 而 Git 采取了文<br>件系统快照的方式。<br><strong>权限控制</strong><br>对团队中参与开发的人员进行权限控制。<br>对团队外开发者贡献的代码进行审核——Git 独有。<br><strong>历史记录</strong><br>查看修改人、 修改时间、 修改内容、 日志信息。<br>将本地文件恢复到某一个历史状态。<br><strong>分支管理</strong><br>允许开发团队在工作过程中多条生产线同时推进任务， 进一步提高效率</p><h2 id="2-git的优势"><a href="#2-git的优势" class="headerlink" title="2.git的优势"></a>2.git的优势</h2><p><strong>版本控制简介</strong>工程设计领域中使用版本控制管理工程蓝图的设计过程。在 IT 开发过程中也可以使用版本控制思想管理代码的版本迭代。<br><strong>版本控制工具</strong><br>集中式版本控制工具：<br>CVS、SVN、VSS……<br>分布式版本控制工具：<br>Git、Mercurial、Bazaar、Darcs……</p><p><strong>Git 的优势</strong><br>大部分操作在本地完成，不需要联网<br>完整性保证<br>尽可能添加数据而不是删除或修改数据<br>分支操作非常快捷流畅<br>与 Linux 命令全面兼容</p><h2 id="3-git简介"><a href="#3-git简介" class="headerlink" title="3.git简介"></a>3.git简介</h2><p><img src="/images/github/image-20210104145617035.png" alt="git结构"></p><p><strong>Git 和代码托管中心</strong><br>代码托管中心的任务：维护远程库<br> 局域网环境下： GitLab 服务器<br> 外网环境下 ： GitHub 、 码云</p><h2 id="4-Git-命令行操作"><a href="#4-Git-命令行操作" class="headerlink" title="4.Git 命令行操作"></a>4.Git 命令行操作</h2><h3 id="4-1-本地库初始化"><a href="#4-1-本地库初始化" class="headerlink" title="4.1 本地库初始化"></a>4.1 本地库初始化</h3><p>命令：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改</p><h3 id="4-2-设置签名"><a href="#4-2-设置签名" class="headerlink" title="4.2 设置签名"></a>4.2 设置签名</h3><p>用户名：xxxxx<br>Email 地址：zzzz@yyy.com（可以没有）<br>作用：区分不同开发人员的身份<br>辨析：这里设置的签名和登录远程库(代码托管中心)的账号、密码没有任何关系。<br><strong>命令</strong> :<br>项目级别/仓库级别：仅在当前本地库范围内有效 </p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config user.name xxxxgit config user.email zzzz@yyy.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>信息保存位置：./.git/config 文件</p><p>系统用户级别：登录当前操作系统的用户范围</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config --global user.name xxxx_glbgit config --global zzzz@yyy.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>信息保存位置：~/.gitconfig 文件</p><p><strong>级别优先级</strong><br>就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名<br>如果只有系统用户级别的签名，就以系统用户级别的签名为准<br>二者都没有不允许<br>实际开发中一般只设置一个系统签名就行了</p><h3 id="4-3-基本操作"><a href="#4-3-基本操作" class="headerlink" title="4.3 基本操作"></a>4.3 基本操作</h3><h4 id="4-3-1状态查看"><a href="#4-3-1状态查看" class="headerlink" title="4.3.1状态查看"></a>4.3.1状态查看</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">git status <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看工作区、暂存区状态</p><h4 id="4-3-2-添加"><a href="#4-3-2-添加" class="headerlink" title="4.3.2 添加"></a>4.3.2 添加</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">git add [file name] <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将工作区的“新建/修改”添加到暂存区</p><h4 id="4-3-3-提交"><a href="#4-3-3-提交" class="headerlink" title="4.3.3 提交"></a>4.3.3 提交</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">git commit -m <span class="token string">"备注你的版本记录"</span> [file name] <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将暂存区的内容提交到本地库</p><h4 id="4-3-4-查看历史记录"><a href="#4-3-4-查看历史记录" class="headerlink" title="4.3.4 查看历史记录"></a>4.3.4 查看历史记录</h4><pre class="line-numbers language-none"><code class="language-none">git log//显示完整记录git log --pretty=oneline//显示简化的记录，但有完整的哈希值git log --oneline//显示简化的哈希值(只显示过去的)git reflog//显示变更任意版本需要移动的指针次数(过去未来全部显示)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>多屏显示控制方式： 空格向下翻页；b 向上翻页；q 退出</p><h4 id="4-3-5-前进后退"><a href="#4-3-5-前进后退" class="headerlink" title="4.3.5 前进后退"></a>4.3.5 前进后退</h4><p>基于索引值操作[推荐]</p><pre class="line-numbers language-none"><code class="language-none">git reset --hard [局部索引值] git reset --hard a6ace91<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用^符号：只能后退<br>注：一个^表示后退一步，n 个表示后退 n 步</p><pre class="line-numbers language-none"><code class="language-none">git reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用~符号：只能后退<br>注：表示后退 n 步</p><pre class="line-numbers language-none"><code class="language-none">git reset --hard HEAD~n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-3-6-reset-命令的三个参数对比"><a href="#4-3-6-reset-命令的三个参数对比" class="headerlink" title="4.3.6 reset 命令的三个参数对比"></a>4.3.6 reset 命令的三个参数对比</h4><p>—soft 参数：仅在本地库移动 HEAD 指针<br>—mixed 参数：在本地库移动 HEAD 指针；重置暂存区<br>—hard 参数：在本地库移动 HEAD 指针 ； 重置暂存区 ； 重置工作区</p><h4 id="4-3-7-删除文件并找回"><a href="#4-3-7-删除文件并找回" class="headerlink" title="4.3.7 删除文件并找回"></a>4.3.7 删除文件并找回</h4><p>前提：删除前，文件存在时的状态提交到了本地库。<br>操作：git reset —hard [指针位置]<br>删除操作已经提交到本地库：指针位置指向历史记录<br>删除操作尚未提交到本地库：指针位置使用 HEAD</p><h4 id="4-3-8-比较文件差异"><a href="#4-3-8-比较文件差异" class="headerlink" title="4.3.8 比较文件差异"></a>4.3.8 比较文件差异</h4><pre class="line-numbers language-none"><code class="language-none">git diff [文件名] <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将工作区中的文件和暂存区进行比较</p><pre class="line-numbers language-none"><code class="language-none">git diff [本地库中历史版本] [文件名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将工作区中的文件和本地库历史记录比较<br>不带文件名比较多个文件</p><h3 id="4-4-分支管理"><a href="#4-4-分支管理" class="headerlink" title="4.4 分支管理"></a>4.4 分支管理</h3><h4 id="4-4-1-什么是分支？"><a href="#4-4-1-什么是分支？" class="headerlink" title="4.4.1 什么是分支？"></a>4.4.1 什么是分支？</h4><p>在版本控制过程中，使用多条线同时推进多个任务。</p><h4 id="4-4-2-分支的好处？"><a href="#4-4-2-分支的好处？" class="headerlink" title="4.4.2 分支的好处？"></a>4.4.2 分支的好处？</h4><p>同时并行推进多个功能开发，提高开发效率<br>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</p><h4 id="4-4-3-分支操作"><a href="#4-4-3-分支操作" class="headerlink" title="4.4.3 分支操作"></a>4.4.3 分支操作</h4><p><strong>创建分支</strong> </p><pre class="line-numbers language-none"><code class="language-none">git branch [分支名] <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看分支</strong> </p><pre class="line-numbers language-none"><code class="language-none">git branch -v <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>切换分支</strong></p><pre class="line-numbers language-none"><code class="language-none">git checkout [分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>合并分支</strong><br>第一步：切换到要接受修改的分支上 </p><pre class="line-numbers language-none"><code class="language-none">git checkout [原来的分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步：执行 merge 命令 </p><pre class="line-numbers language-none"><code class="language-none">git merge [有新内容分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决冲突</strong></p><p>第一步：编辑文件，删除特殊符号<br>第二步：把文件修改到满意的程度，保存退出<br>第三步：git add [文件名]<br>第四步：git commit -m “日志信息”（后面不带文件名）</p><h2 id="5-Git-基本原理"><a href="#5-Git-基本原理" class="headerlink" title="5.Git 基本原理"></a>5.Git 基本原理</h2><h3 id="5-1-哈希"><a href="#5-1-哈希" class="headerlink" title="5.1 哈希"></a>5.1 哈希</h3><p>哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下 几个共同点：<br> ①不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。<br>②哈希算法确定，输入数据确定，输出数据能够保证不变<br>③哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大<br>④哈希算法不可逆 Git 底层采用的是 SHA-1 算法。（MD5也是哈希算法的一种）<br>哈希算法可以被用来验证文件，Git 就是靠这种机制来从根本上保证数据完整性的。</p><h3 id="5-2-Git-保存版本的机制"><a href="#5-2-Git-保存版本的机制" class="headerlink" title="5.2 Git 保存版本的机制"></a>5.2 Git 保存版本的机制</h3><h4 id="5-2-1-集中式版本控制工具的文件管理机制"><a href="#5-2-1-集中式版本控制工具的文件管理机制" class="headerlink" title="5.2.1 集中式版本控制工具的文件管理机制"></a>5.2.1 集中式版本控制工具的文件管理机制</h4><p>以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是一组基本 文件和每个文件随时间逐步累积的差异。</p><p><img src="/images/github/image-20210105000016196.png" alt=""></p><h4 id="5-2-2-Git-的文件管理机制"><a href="#5-2-2-Git-的文件管理机制" class="headerlink" title="5.2.2 Git 的文件管理机制"></a>5.2.2 Git 的文件管理机制</h4><p>Git 把数据看作是小型文件系统的一组快照。每次提交更新时 Git 都会对当前 的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改， Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以 Git 的 工作方式可以称之为快照流。</p><p><img src="/images/github/image-20210105000029275.png" alt=""></p><h4 id="5-2-3-Git-文件管理机制细节"><a href="#5-2-3-Git-文件管理机制细节" class="headerlink" title="5.2.3 Git 文件管理机制细节"></a>5.2.3 Git 文件管理机制细节</h4><p><img src="/images/github/image-20210104235138752.png" alt=""></p><p>提交对象及其父对象形成的链条</p><p><img src="/images/github/image-20210104235208324.png" alt=""></p><h3 id="5-3-Git-分支管理机制"><a href="#5-3-Git-分支管理机制" class="headerlink" title="5.3 Git 分支管理机制"></a>5.3 Git 分支管理机制</h3><h4 id="5-3-1-分支的创建"><a href="#5-3-1-分支的创建" class="headerlink" title="5.3.1 分支的创建"></a>5.3.1 分支的创建</h4><p><img src="/images/github/image-20210104235624280.png" alt=""></p><h4 id="5-3-2-分支的切换"><a href="#5-3-2-分支的切换" class="headerlink" title="5.3.2 分支的切换"></a>5.3.2 分支的切换</h4><p><img src="/images/github/image-20210104235717453.png" alt=""></p><p><img src="/images/github/image-20210104235729611.png" alt=""></p><p><img src="/images/github/image-20210104235745003.png" alt=""></p><p><img src="/images/github/image-20210104235758253.png" alt=""></p><h2 id="6-GitHub"><a href="#6-GitHub" class="headerlink" title="6.GitHub"></a>6.GitHub</h2><h3 id="6-2-创建远程库"><a href="#6-2-创建远程库" class="headerlink" title="6.2 创建远程库"></a>6.2 创建远程库</h3><h3 id="6-3-创建远程库地址别名"><a href="#6-3-创建远程库地址别名" class="headerlink" title="6.3 创建远程库地址别名"></a>6.3 创建远程库地址别名</h3><pre class="line-numbers language-none"><code class="language-none">git remote -v 查看当前所有远程地址别名git remote add [别名] [远程地址]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-4-推送"><a href="#6-4-推送" class="headerlink" title="6.4 推送"></a>6.4 推送</h3><pre class="line-numbers language-none"><code class="language-none">git push [别名] [分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-5-克隆"><a href="#6-5-克隆" class="headerlink" title="6.5 克隆"></a>6.5 克隆</h3><pre class="line-numbers language-none"><code class="language-none">git clone [远程地址]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果：<br>完整的把远程库下载到本地<br>创建远程地址别名<br>初始化本地库</p><h3 id="6-6-团队成员邀请"><a href="#6-6-团队成员邀请" class="headerlink" title="6.6 团队成员邀请"></a>6.6 团队成员邀请</h3><h3 id="6-7-拉取"><a href="#6-7-拉取" class="headerlink" title="6.7 拉取"></a>6.7 拉取</h3><pre class="line-numbers language-none"><code class="language-none">git pull [远程库地址别名] [远程分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pull=fetch+merge</p><pre class="line-numbers language-none"><code class="language-none">git fetch [远程库地址别名] [远程分支名]git merge [远程库地址别名/远程分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-8-解决冲突"><a href="#6-8-解决冲突" class="headerlink" title="6.8 解决冲突"></a>6.8 解决冲突</h3><p>要点<br>如果不是基于 GitHub 远程库的最新版所做的修改，不能推送，必须先拉取。<br>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。</p><h3 id="6-9-跨团队协作"><a href="#6-9-跨团队协作" class="headerlink" title="6.9 跨团队协作"></a>6.9 跨团队协作</h3><p>Fork<br>本地修改，然后推送到远程<br>Pull Request</p><p>主人：<br>审核代码<br>合并代码<br>将远程库修改拉取到本地</p><h3 id="6-10-SSH-登录"><a href="#6-10-SSH-登录" class="headerlink" title="6.10 SSH 登录"></a>6.10 SSH 登录</h3><p>进入当前用户的家目录<br>$ cd ~<br>删除.ssh 目录<br>$ rm -rvf .ssh<br>运行命令生成.ssh 密钥目录<br>$ ssh-keygen -t rsa -C xxx@yyy.com<br>进入.ssh 目录查看文件列表<br>$ cd .ssh<br>$ ls -lF<br>查看 id_rsa.pub 文件内容<br>$ cat id_rsa.pub<br>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys<br>New SSH Key<br>输入复制的密钥信息<br>回到 Git bash 创建远程地址别名<br>git remote add origin_ssh 网页上复制的ssh地址<br>推送文件进行测试</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++语言程序设计（1-5章）</title>
      <link href="2021/01/01/cpp/"/>
      <url>2021/01/01/cpp/</url>
      
        <content type="html"><![CDATA[<p><span style="color: #c31887;">第一次学是在2017上半年，大一的第二个学期，虽然当时学的挺不错，但是已经忘了许多，最近需要找工作，重新学一下。</span></p><p>使用的教材：C++语言程序设计（第4版）郑莉等</p><center><span style="color:blue;font-size:15px">2021/1/1</span></center><h2 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h2><h3 id="1-2-面向对象的方法"><a href="#1-2-面向对象的方法" class="headerlink" title="1.2 面向对象的方法"></a>1.2 面向对象的方法</h3><p><strong>对象</strong>：用来描述客观事物的一个实体，用来构成系统的一个基本单位，由<strong>一组属性</strong>和<strong>一组行为</strong>构成</p><p><strong>类</strong>：具有相同属性和服务的<strong>一组对象的集合</strong></p><p><strong>封装</strong>：把对象的属性和服务结合成一个独立的系统单位，并尽可能隐藏对象的内部细节</p><p><strong>继承</strong>：继承类的对象拥有其一般类的全部属性和服务，称作特殊类对一般类的继承</p><p><strong>多态性</strong>：在一般类中定义的属性或行为，被特殊可继承之后，可以具有不同的数据类型或表现出不同的行为</p><h3 id="1-4-信息的表示与存储"><a href="#1-4-信息的表示与存储" class="headerlink" title="1.4 信息的表示与存储"></a>1.4 信息的表示与存储</h3><h4 id="1-4-2-进制的转换"><a href="#1-4-2-进制的转换" class="headerlink" title="1.4.2 进制的转换"></a>1.4.2 进制的转换</h4><p>十进制转换2（或x）进制：</p><p>整数部分：除2取余</p><p>小数部分：乘2取整</p><p>然后拼在一起</p><h4 id="1-4-3-信息的存储单位"><a href="#1-4-3-信息的存储单位" class="headerlink" title="1.4.3 信息的存储单位"></a>1.4.3 信息的存储单位</h4><p><strong>位</strong>（bit）：1位二进制信息</p><p><strong>字节</strong>（Byte）：由8位二进制数字组成，是信息存储中最常用的基本单位</p><p><strong>字</strong>（Word）:字是位的组合，并作为一个独立的信息单位处理。常用的固定字长有8位、16位、32位等。</p><p><strong>机器字长</strong>：机器字长一般是指参加运算的寄存器所含有的二进制数的位数，它代表了机器的精度，如32位、64位等。</p><h4 id="1-4-4-二进制数的编码表示"><a href="#1-4-4-二进制数的编码表示" class="headerlink" title="1.4.4 二进制数的编码表示"></a>1.4.4 二进制数的编码表示</h4><p><strong>原码</strong>：符号数字位化为0（正）和1（负）</p><p><strong>反码</strong>：作为补码的中间码，正数不变，负数符号位不变，其余各位取反</p><p><strong>补码</strong>：正数不变，负数由反码的最末位加1</p><p>补码符号位可以作为数值参加运算，补码运算的结果仍为补码</p><h4 id="1-4-5-浮点数的表示"><a href="#1-4-5-浮点数的表示" class="headerlink" title="1.4.5 浮点数的表示"></a>1.4.5 浮点数的表示</h4><p>N：要表示的浮点数，用科学计数法写就是</p><script type="math/tex; mode=display">N=M*R^E</script><p>R：基数，计算机用2做基数</p><p>E：N的阶码</p><p>M：N的全部有效数字，称为N的尾数</p><p><img src="/images/cpp/123.png" alt="浮点数"></p><h4 id="1-4-6-数的表示范围（补码）"><a href="#1-4-6-数的表示范围（补码）" class="headerlink" title="1.4.6 数的表示范围（补码）"></a>1.4.6 数的表示范围（补码）</h4><p>8位整数的无符号数可以表示0 ~ +255</p><p>8位整数的有符号数可以表示-128 ~ +127（因为0占正数一个空间）</p><p>n位小数范围为 -$1$ ~ +$(1-2^{-n})$</p><p>为了同时满足对浮点数的范围和精度的要求，往往采用<strong>双倍字长</strong>甚至<strong>更多个字长</strong>来表示一个浮点数</p><h4 id="1-4-8-汉字英文信息的表示"><a href="#1-4-8-汉字英文信息的表示" class="headerlink" title="1.4.8 汉字英文信息的表示"></a>1.4.8 汉字英文信息的表示</h4><p>西文使用ASCII码来表示，使用一个字节中的7位来表示128个字符，剩下一位作为校验码</p><p>汉字可以使用GB2312（国标码），2字节码，用两个7位二进制数编码表示一个汉字（还有其他的编码方式）</p><h3 id="1-5-程序开发的基本概念"><a href="#1-5-程序开发的基本概念" class="headerlink" title="1.5 程序开发的基本概念"></a>1.5 程序开发的基本概念</h3><h4 id="1-5-1-基本术语"><a href="#1-5-1-基本术语" class="headerlink" title="1.5.1 基本术语"></a>1.5.1 基本术语</h4><p><strong>源程序</strong>：源代码</p><p><strong>目标程序</strong>：是源程序经过翻译加工后生成的程序，目标程序可以用机器语言或者汇编语言来表示</p><p><strong>翻译程序</strong>：把源程序翻译为目标程序的程序<br>                -汇编程序：把汇编语言翻译成机器语言形式的目标程序<br>                -编译程序：把高级语言翻译成目标程序<br>                -解释程序：也是把高级语言翻译成机器指令，但是不生成整个的目标程序，边翻译边执行，需要重复解释循环语句，效率较低</p><h4 id="1-5-2-完整的程序过程"><a href="#1-5-2-完整的程序过程" class="headerlink" title="1.5.2 完整的程序过程"></a>1.5.2 完整的程序过程</h4><div class="table-container"><table><thead><tr><th>编辑</th><th>编译</th><th>连接</th><th>运行</th></tr></thead><tbody><tr><td>.cpp</td><td>.obj</td><td>.exe</td></tr></tbody></table></div><p>连接是将多个目标文件以及库中的某些文件放在一起，生成exe</p><center><span style="color:blue;font-size:15px">2021/1/2</span></center><h2 id="第2章-C-简单程序设计"><a href="#第2章-C-简单程序设计" class="headerlink" title="第2章 C++简单程序设计"></a>第2章 C++简单程序设计</h2><h3 id="2-2-基本数据类型和表达式"><a href="#2-2-基本数据类型和表达式" class="headerlink" title="2.2 基本数据类型和表达式"></a>2.2 基本数据类型和表达式</h3><h4 id="2-2-1-基本数据类型"><a href="#2-2-1-基本数据类型" class="headerlink" title="2.2.1 基本数据类型"></a>2.2.1 基本数据类型</h4><p>变量的大小会根据编译器和所使用的电脑而有所不同</p><p>我电脑上的基本数据类型大小：</p><p><img src="/images/cpp/image-20210102143445587.png" alt="数据大小"></p><h4 id="2-2-2-常量"><a href="#2-2-2-常量" class="headerlink" title="2.2.2 常量"></a>2.2.2 常量</h4><p>八进制以0开头<br>十六进制以0x开头<br>字符常量用ASCII码存储，可以用转义字符’\‘输入<br>字符串常量末尾需要添加’\0’作为结尾标记</p><h4 id="2-2-3-变量"><a href="#2-2-3-变量" class="headerlink" title="2.2.3 变量"></a>2.2.3 变量</h4><p>16进制和指数形式的表示:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x123</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"hex:"</span><span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">0.24E+2</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp/image-20210102145702550.png" alt="16进制"></p><h4 id="2-2-5-运算符与表达式"><a href="#2-2-5-运算符与表达式" class="headerlink" title="2.2.5 运算符与表达式"></a>2.2.5 运算符与表达式</h4><p>“%”的优先级与”/“相同</p><p>赋值表达式运算”=”的结合性为从右往左<br>    例：a=b=c=5</p><p><u><strong>复合的赋值运算符</strong></u>有10种，优先级与”=”相同，结合性也是从右往左<br>    例：a+=a-=a*a </p><p><strong><u>逗号运算符</u></strong>为”,”逗号表达式形式为 “表达式1,表达式2” ，求解顺序是先1后2，最终结果为表达式2的值<br>    例：a=3*5,a*4    最终结果为60</p><p><strong><u>关系运算符</u></strong>的优先级：<br>关系表达式的结果类型为bool，值只能是true或false<img src="/images/cpp/image-20210102151756711.png" alt="关系运算符"></p><p><strong><u>逻辑运算符</u></strong>的优先级：”!”&gt;”&amp;&amp;”&gt;”||”<br>    注意：“&amp;&amp;”和“||”运算具有短路特性<br>    “&amp;&amp;”的第一个值为false就不对第二个求值，“||”的第一个值为true就不对第二个求值</p><p><u><strong>条件运算符</strong></u>“?”是c++中唯一的一个三元运算符</p><p><strong><u>sizeof运算符</u></strong>用来计算<strong>某种类型</strong>的对象在内存中所占的字节数（是计算类型的，不对表达式求值）</p><p><u><strong>位运算</strong></u>：<br>c++提供了6个位运算符<br>（1）按位与（&amp;）：<br><img src="/images/cpp/image-20210102153802519.png" alt=""><br>可以将操作数中的任意位置0，其他位不变（如和11110111与）<br>也可以取出一个数的低字节（如和00001111与）<br>（2）按位或（|）：可以将操作数中的任意位置1，其他位不变（如和00001000或）<br>（3）按位异或（^）：可以将操作数中的若干位置翻转（取反）<br>（4）按位取反（~）：单目运算符，对每一位都取反<br>（5）移位（&lt;&lt;）（&gt;&gt;）：左移低位补0，高位舍弃，右移低位舍弃，高位补符号位（有符号的话）<br>        注意：移位运算的结果是表达式的值，不改变变量本身的值，如a&gt;&gt;2不改变a</p><p><strong><u>混合运算时数据类型的转换</u></strong>：<br>（1）隐含转换：操作数类型不一致时，编译系统会自动对数据进行转换（由低类型到高类型）<img src="/images/cpp/image-20210102160055384.png" alt="隐含转换"><br>（2）显式转换：如a=（int）b</p><h3 id="2-3-数据的输入与输出"><a href="#2-3-数据的输入与输出" class="headerlink" title="2.3 数据的输入与输出"></a>2.3 数据的输入与输出</h3><p>在C++中，<strong>将数据从一个对象到另一个对象的流动抽象为“<u>流</u>”。流在使用前要被建立，使用后要被删除。数据的输入与输出是通过I/O流来实现的</strong>，cin和cout是预定义的流类对象。cin用来处理标准输入，即键盘输入。cout用来处理标准输出，即屏幕输出。</p><h3 id="2-4-算法的基本控制结构"><a href="#2-4-算法的基本控制结构" class="headerlink" title="2.4 算法的基本控制结构"></a>2.4 算法的基本控制结构</h3><p>顺序结构，选择结构和循环结构</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//2_2.cpp 判断闰年</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token keyword">bool</span> isLeapYear<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter the year:"</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> year<span class="token punctuation">;</span>isLeapYear <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isLeapYear<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> year <span class="token operator">&lt;&lt;</span> <span class="token string">"is a leap year"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> year <span class="token operator">&lt;&lt;</span> <span class="token string">"is not a leap year"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>goto 语句</strong>允许把控制无条件转移到同一函数内的被标记的语句，goto 语句一个很好的作用是退出深嵌套例程。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">goto</span> label<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>label<span class="token operator">:</span> statement<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-自定义数据结构"><a href="#2-5-自定义数据结构" class="headerlink" title="2.5 自定义数据结构"></a>2.5 自定义数据结构</h3><p><strong>枚举</strong>（enumerate）类型 enum：<br>例：enum Weekday{SUN,MON,TUE,WED,THU,FRI,SAT};<br>对枚举元素按常量处理，不能对它们赋值<br>枚举元素具有默认值，依次为：0,1,2,···<br>也可以在声明时另行定义枚举元素的值，<br>如：enum Weekday{SUN=7,MON=1,TUE,WED,THU,FRI,SAT};<br>定义SUN为7，MON为1，以后顺序加1，SAT为6</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 2_11.cpp 枚举</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">GameResult</span> <span class="token punctuation">{</span> WIN<span class="token punctuation">,</span> LOST<span class="token punctuation">,</span> TIE<span class="token punctuation">,</span> CANAEL <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>GameResult result<span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">GameResult</span> omit <span class="token operator">=</span> CANAEL<span class="token punctuation">;</span><span class="token comment">//也可以在类型名前写enum     </span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">=</span> WIN<span class="token punctuation">;</span> count <span class="token operator">&lt;=</span> CANAEL<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//隐式类型转换</span>result <span class="token operator">=</span> <span class="token function">GameResult</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显式类型转换</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> omit<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"the game was cancelled"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"the game was played"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> WIN<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"and we won!"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> LOST<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"and we lost."</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-深度探索"><a href="#2-6-深度探索" class="headerlink" title="2.6 深度探索"></a>2.6 深度探索</h3><h4 id="2-6-1-变量的实现机制"><a href="#2-6-1-变量的实现机制" class="headerlink" title="2.6.1 变量的实现机制"></a>2.6.1 变量的实现机制</h4><p>编译器需要根据变量的数据类型选择适当的指令，CPU所执行的指令并不对操作数的类型加以区分。<br>（因为两个不同类型的数，值不一样，但是他们的二进制形式可能一样）</p><h4 id="2-6-2-C-表达式的执行原理（汇编assembly）"><a href="#2-6-2-C-表达式的执行原理（汇编assembly）" class="headerlink" title="2.6.2 C++表达式的执行原理（汇编assembly）"></a>2.6.2 C++表达式的执行原理（汇编assembly）</h4><p>CPU的大部分读写操作都是对寄存器进行的，IA-32的通用寄存器有eax,ebx,ecx,edx,esp,ebp,esi,edi八个，都是32位寄存器。<br>例：$d=(a+b)*c$</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">mov <span class="token number">0x80495dc</span>,%eax//将 <span class="token number">0x80495dc</span> 地址内的<span class="token number">32</span>位整数装入eax寄存器（<span class="token number">0x80495dc</span>为内存地址，在cpu处理需放入寄存器）mov <span class="token number">0x80495d8</span>,%ecx//将 <span class="token number">0x80495d8</span> 地址内的<span class="token number">32</span>位整数装入ecx寄存器add %eax,%ecx//将 eax 和 ecx 两寄存器内的数相加，结果放在ecx寄存器中mov <span class="token number">0x80495e4</span>,%eax//将 <span class="token number">0x80495e4</span> 地址内的<span class="token number">32</span>位证书装入eax寄存器imul %ecx,%eax//将 eax 和 ecx 寄存器中的两个<span class="token number">32</span>位有符号整数相乘,得到一个<span class="token number">64</span>//位整数,结果的低<span class="token number">32</span>位放入 eax 寄存器,高<span class="token number">32</span>位放入 edx 寄存器（d也是<span class="token number">32</span>位整数，所以只取低<span class="token number">32</span>位）mov %eax,<span class="token number">0x80495e4</span>//将 eax 寄存器中的<span class="token number">32</span>位证书存入 <span class="token number">0x80495e4</span> 地址中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p>2-1 C++语言有哪些主要特点和优点？<br>答：<br>优点：性能优势，触碰底层；<br>缺点：难学，开发时间慢成本高，大型项目或者图形编程更需要，垃圾处理不如java，指针操作会带来不安全；</p><center><span style="color:blue;font-size:15px">2021/1/3</span></center><h2 id="第3章-函数"><a href="#第3章-函数" class="headerlink" title="第3章 函数"></a>第3章 函数</h2><h3 id="3-1-函数的定义与使用"><a href="#3-1-函数的定义与使用" class="headerlink" title="3.1 函数的定义与使用"></a>3.1 函数的定义与使用</h3><h4 id="3-1-2-函数的调用"><a href="#3-1-2-函数的调用" class="headerlink" title="3.1.2 函数的调用"></a>3.1.2 函数的调用</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 3_2.cpp 将八位二进制数转换为十进制</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//计算x的n次方</span><span class="token keyword">double</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter an 8 bit binary number:"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> ch<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>value <span class="token operator">+=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">power</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Decimal value is "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">double</span> val <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>val <span class="token operator">*=</span> x<span class="token punctuation">;</span><span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//3_4.cpp 寻找并输出11~999之间的数m，它满足m,m^2,m^3均为回文数。</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">symm</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token keyword">unsigned</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>m <span class="token operator">=</span> m <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> m <span class="token operator">==</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> m <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">symm</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">symm</span><span class="token punctuation">(</span>m <span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">symm</span><span class="token punctuation">(</span>m <span class="token operator">*</span> m <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"m="</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" m*m="</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">*</span> m<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" m*m*m="</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">*</span> m <span class="token operator">*</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>递归调用：</strong><br>递归算法的实质是将原有的问题分解为新的问题，而解决新问题时又用到了原来问题的解法。按照这一原则分解下去，每次出现的新问题都是原有问题的简化的子集，而最终分解出来的问题，是一个已知解的问题，这便是有限的递归调用。只有有限的递归调用才是有意义的。<br>递归的过程有两个阶段:<br><strong>第一阶段：递推</strong> 将原问题不断分解为新的子问题，逐渐从未知向已知推进，最终到达已知的条件。<br><strong>第二阶段：回归</strong> 从已知的问题出发，按照递推的逆过程，逐一求值回归，最后达到递推的开始处。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//3_9.cpp 计算从n个人里选k个人的组合数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">comn</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> k <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">comn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">comn</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please enter two integers n and k:"</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C(n,k)="</span> <span class="token operator">&lt;&lt;</span> <span class="token function">comn</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//3_10.cpp 汉诺塔问题</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> movecount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//把src针的最上面一个盘子移动到dest针上</span><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">char</span> src<span class="token punctuation">,</span> <span class="token keyword">char</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> src <span class="token operator">&lt;&lt;</span> <span class="token string">"--&gt;"</span> <span class="token operator">&lt;&lt;</span> dest <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>movecount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//把n个盘子从src针移动到dest针，以medium针为中介</span><span class="token keyword">void</span> <span class="token function">hanoi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> src<span class="token punctuation">,</span> <span class="token keyword">char</span> medium<span class="token punctuation">,</span> <span class="token keyword">char</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">move</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">hanoi</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> medium<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">move</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hanoi</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> medium<span class="token punctuation">,</span> src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> m<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter the number of diskes: "</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"the steps to moving "</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">" diskes:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">hanoi</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"total move number: "</span> <span class="token operator">&lt;&lt;</span> movecount<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-3-函数的参数传递"><a href="#3-1-3-函数的参数传递" class="headerlink" title="3.1.3 函数的参数传递"></a>3.1.3 函数的参数传递</h4><p>在函数未被调用时，函数的形参并不占有实际的内存空间，也没有实际的值。只有在函数被调用时才为形参分配粗存储单元，并将实参与形参结合。</p><p><strong>1.值传递</strong>：（直接将实参的值传递给形参）<br>这一过程是参数值的单向传递过程，一旦形参获得了值便与实参脱离关系，以后形参的变化不会影响实参。</p><p><strong>2.引用传递：</strong><br>引用是一种特殊类型的变量，可以被认为是另一个变量的别名，声明一个引用时，必须同时对它进行初始化，使他指向一个已存在的对象，一旦一个引用被初始化后，就不能改为指向其他对象。将引用作为形参，在调用表达式时，才为形参分配内存空间，同时用实参来初始化形参。这样引用类型的形参就通过形实结合，成为了实参的一个别名，对形参的任何操作也就会直接作用于实参。</p><h3 id="3-2-内联函数"><a href="#3-2-内联函数" class="headerlink" title="3.2 内联函数"></a>3.2 内联函数</h3><p>对于一些功能简单，规模较小而又使用频繁的函数，可以设计为内联函数。内联函数不是在调用时发生控制转移，而是在编译时将函数体嵌在每一个调用处。这样就节省了参数传递，控制转移等开销。<br>内联函数的定义只需要使用关键字inline</p><p><strong>注意</strong>：内联只是一个请求，编译器并不承诺将inline修饰的函数作为内联，多数编译器会自动判断处理，如递归函数编译器会只内联到一定深度或根本不内联</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//3_14.cpp 内联函数应用举例</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159265358979</span><span class="token punctuation">;</span><span class="token comment">//内联函数，根据圆的半径计算其面积</span><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">calArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//调用内联函数求圆面积，编译时此处被替换为calArea函数体语句</span><span class="token keyword">double</span> area <span class="token operator">=</span> <span class="token function">calArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> area <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-带默认形参值的函数"><a href="#3-3-带默认形参值的函数" class="headerlink" title="3.3 带默认形参值的函数"></a>3.3 带默认形参值的函数</h3><p>函数在定义时可以预先声明默认的形参值。调用时如果给出实参，则用实参初始化形参，如果没有给出实参，则采用预先声明的默认形参值。例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有默认值的形参必须在形参列表的最后，也就是说，在有默认值的形参右面，不能出无默认值的形参。</p><p><strong>在相同的作用域内</strong>，不允许在同一个函数的多个声明中对同一个参数的默认值重复定义，即使前后定义的值相同也不行。</p><h3 id="3-4-函数重载"><a href="#3-4-函数重载" class="headerlink" title="3.4 函数重载"></a>3.4 函数重载</h3><p>两个以上的函数，具有相同的函数名，但形参的个数或者类型不同，编译器根据实参和形参的类型及个数的最佳匹配，自动确定调用哪一个函数，这就是函数的重载</p><p><img src="/images/cpp/image-20210104011010905.png" alt="函数重载"></p><h3 id="3-5-系统函数"><a href="#3-5-系统函数" class="headerlink" title="3.5 系统函数"></a>3.5 系统函数</h3><p>可以访问zh.cppreference.com查阅常用的C++函数的原型，头文件和用法</p><h3 id="3-6-深度探索"><a href="#3-6-深度探索" class="headerlink" title="3.6 深度探索"></a>3.6 深度探索</h3><h4 id="3-6-1-运行栈与函数调用的执行"><a href="#3-6-1-运行栈与函数调用的执行" class="headerlink" title="3.6.1 运行栈与函数调用的执行"></a>3.6.1 运行栈与函数调用的执行</h4><p>嵌套调用使用运行栈来存储数据，执行过程见课本p91</p><h3 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//t3_9.cpp 编写函数判别一个数是否是质数（素数），在主程序中实现输入输出</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">is_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>is_prime<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"是素数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"不是素数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//t3_10 编写函数求两个整数的最大公约数和最小公倍数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//辗转相除法</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大公约数："</span> <span class="token operator">&lt;&lt;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最小公倍数："</span> <span class="token operator">&lt;&lt;</span> <span class="token function">lcm</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//t3_13.cpp 用递归的方式编写函数求Fibonacci(斐波那契)级数，观察调用的过程</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第4章-类与对象"><a href="#第4章-类与对象" class="headerlink" title="第4章 类与对象"></a>第4章 类与对象</h2><h3 id="4-1-面向对象程序设计的基本特点"><a href="#4-1-面向对象程序设计的基本特点" class="headerlink" title="4.1 面向对象程序设计的基本特点"></a>4.1 面向对象程序设计的基本特点</h3><h4 id="4-1-1-抽象"><a href="#4-1-1-抽象" class="headerlink" title="4.1.1 抽象"></a>4.1.1 抽象</h4><p>抽象是对具体对象（问题）进行概括，抽出这一类对象的公共性质并加以描述的过程。<br>首先注意的是问题的本质及描述，其次是解决问题的具体过程<br>对一个问题的抽象应该包括两个方面:数据抽象和行为抽象（或称为功能抽象、代码抽象）<br>前者描述某类对象的属性或状态，后者描述某类对象的共同行为或功能特征<br>例：一个时钟<br>数据抽象：int hour,int minute,int second<br>功能抽象：showTime（）,setTime（）</p><h4 id="4-1-2-封装"><a href="#4-1-2-封装" class="headerlink" title="4.1.2 封装"></a>4.1.2 封装</h4><p>封装就是将抽象得到的数据和行为相结合，形成一个有机的整体，也就是将数据与操作数据的函数代码进行有机的结合，形成”类“，其中的数据和函数都是类的成员</p><p><img src="/images/cpp/image-20210104012147193.png" alt="时钟类"></p><h4 id="4-1-3-继承"><a href="#4-1-3-继承" class="headerlink" title="4.1.3 继承"></a>4.1.3 继承</h4><p>C++语言中提供了类的继承机制，允许程序员在保持原有类特性的基础上，进行更具体更详细的说明。<br>——详见第7章</p><h4 id="4-1-4-多态"><a href="#4-1-4-多态" class="headerlink" title="4.1.4 多态"></a>4.1.4 多态</h4><p>从广义上说，多态性是指一段程序能够处理多种类型对象的能力。在C++语言中，这种多态性可以通过强制多态、重载多态、类型参数化多态、包含多态4种形式来实现。<br>包含多态和类型参数化多态属于一般多态性，是真正的多态性。C++中采用虚函数实现包含多态。虚函数是多态性的精华，将在第8章介绍。模板是C++实现参数化多态性的工具，将在第9章介绍。</p><center><span style="color:blue;font-size:15px">2021/1/4</span></center><h3 id="4-2-类和对象"><a href="#4-2-类和对象" class="headerlink" title="4.2 类和对象"></a>4.2 类和对象</h3><h4 id="4-2-2-类成员的访问控制"><a href="#4-2-2-类成员的访问控制" class="headerlink" title="4.2.2 类成员的访问控制"></a>4.2.2 类成员的访问控制</h4><p>对类成员的访问权限的控制，是通关设置成员的访问控制属性而实现的。访问控制性可以有以下3种：公有类型（public）私有类型（private）和保护类型（protected）<br>公有类型成员定义了类的外部接口<br>私有成员只能被本类的成员函数访问，来自类外部的任何访问都是非法的<br>保护类型成员的性质和私有成员的性质相似，其差别在于继承过程中对产生的新类影响不同（详见第7章）<br>在类中，对于未指定任何访问控制属性的成员，其访问控制属性为私有类型<br>习惯：在书写时通畅将公有类型放在最前面，这样便于阅读，因为它们是外部访问时所要了解的</p><center><span style="color:blue;font-size:15px">2021/1/5</span></center><h4 id="4-2-3-对象"><a href="#4-2-3-对象" class="headerlink" title="4.2.3 对象"></a>4.2.3 对象</h4><p>类实际上是一种抽象机制，它描述了一类事物的共同属性和行为。在C++中，类的对象就是该类的某一特定实体（也称实例）</p><p><strong>注意</strong>：对象所占据的内存空间只是用于存放数据成员，函数成员不在每一个对象中存储副本，每个函数的代码在内存中只占据一份空间。</p><p>在类的外部只能访问到类的共有成员；在类的成员函数中，可以访问到类的全部成员</p><h4 id="4-2-4-类的成员函数"><a href="#4-2-4-类的成员函数" class="headerlink" title="4.2.4 类的成员函数"></a>4.2.4 类的成员函数</h4><h5 id="1-成员函数的实现"><a href="#1-成员函数的实现" class="headerlink" title="1.成员函数的实现"></a>1.成员函数的实现</h5><p>函数的原型声明要写在类体中，原型说明了函数的参数表和返回值类型。而函数的具体实现是写在类定义外的。</p><p>类的成员函数需要用类名来限制，例如”Clock::ShowTime”</p><h5 id="2-成员函数中的目的对象"><a href="#2-成员函数中的目的对象" class="headerlink" title="2.成员函数中的目的对象"></a>2.成员函数中的目的对象</h5><p>调用一个成员函数与调用普通函数的差异在于，需要使用“.”操作符指出调用所针对的对象，这一对象在本次调用中称为目的对象。例如使用myClock.showTime（）调用showTime函数时，myClock就是这一调用过程中的目的对象。</p><p><strong>注意</strong>：在类的成员函数中，既可以访问目的对象的私有成员，又可以访问当前类的其他对象的私有成员</p><h5 id="3-带默认形参值的成员函数"><a href="#3-带默认形参值的成员函数" class="headerlink" title="3.带默认形参值的成员函数"></a>3.带默认形参值的成员函数</h5><p>类的成员函数也可以有默认形参值，其调用规则与普通函数相同</p><h5 id="4-内联成员函数"><a href="#4-内联成员函数" class="headerlink" title="4.内联成员函数"></a>4.内联成员函数</h5><p>要在权衡利弊的基础上慎重选择，只有对相对简单的成员函数才可以声明为内联函数。</p><p>内联函数的声明有两种方法：隐式声明和显式声明</p><p>隐式声明：将函数体直接放在类体内</p><p><img src="/images/cpp/image-20210105124151720.png" alt="隐式声明"></p><p>显式声明：在函数体实现时，在函数返回值类型前加上inline</p><p>显式声明和隐式声明的效果是完全相同的</p><h4 id="4-2-5-程序实例"><a href="#4-2-5-程序实例" class="headerlink" title="4.2.5 程序实例"></a>4.2.5 程序实例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//4_1.cpp 时钟类的完整程序</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token punctuation">{</span><span class="token comment">//时钟类的定义</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//外部接口，公有成员函数</span><span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> newH <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> newM <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> newS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">showTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">//私有数据成员</span><span class="token keyword">int</span> hour<span class="token punctuation">,</span> minute<span class="token punctuation">,</span> second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//时钟类成员函数的具体实现</span><span class="token keyword">void</span> <span class="token class-name">Clock</span><span class="token operator">::</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> newH<span class="token punctuation">,</span> <span class="token keyword">int</span> newM<span class="token punctuation">,</span> <span class="token keyword">int</span> newS<span class="token punctuation">)</span> <span class="token punctuation">{</span>hour <span class="token operator">=</span> newH<span class="token punctuation">;</span>minute <span class="token operator">=</span> newM<span class="token punctuation">;</span>second <span class="token operator">=</span> newS<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">Clock</span><span class="token operator">::</span><span class="token function">showTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> hour <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> minute <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Clock myclock<span class="token punctuation">;</span><span class="token comment">//定义对象myclock</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"First time set and output:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>myclock<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myclock<span class="token punctuation">.</span><span class="token function">showTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Second time set and output"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>myclock<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myclock<span class="token punctuation">.</span><span class="token function">showTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-构造函数和析构函数"><a href="#4-3-构造函数和析构函数" class="headerlink" title="4.3 构造函数和析构函数"></a>4.3 构造函数和析构函数</h3><h4 id="4-3-1-构造函数"><a href="#4-3-1-构造函数" class="headerlink" title="4.3.1 构造函数"></a>4.3.1 构造函数</h4><p>构造函数的作用是在对象被创建时使用特定的值构造对象，将对象初始化为一个特定的状态。<br>只要有了构造函数，编译器就会在建立新对象的地方自动插入对构造函数调用的代码。<br>调用时无需提供参数的构造函数称为<strong>默认构造函数</strong>，如果类中没有写构造函数，编译器会自动生成一个隐含的默认构造函数，该构造函数的参数列表和函数体皆为空。如果在类中声明了构造函数，编译器便不会生成默认构造函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Clock</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">/*编译系统生成的隐含的默认构造函数*/</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造函数</strong>的函数名与类名相同，而且没有返回值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Clock</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Clock</span><span class="token punctuation">(</span><span class="token keyword">int</span> NewH<span class="token punctuation">,</span> <span class="token keyword">int</span> NewM<span class="token punctuation">,</span> <span class="token keyword">int</span> NewS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造函数</span>    <span class="token keyword">void</span> <span class="token function">SetTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> NewH<span class="token punctuation">,</span> <span class="token keyword">int</span> NewM<span class="token punctuation">,</span> <span class="token keyword">int</span> NewS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">ShowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> Hour<span class="token punctuation">,</span> Minute<span class="token punctuation">,</span> Second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//构造函数的实现：</span><span class="token class-name">Clock</span><span class="token operator">::</span><span class="token function">Clock</span><span class="token punctuation">(</span><span class="token keyword">int</span> NewH<span class="token punctuation">,</span> <span class="token keyword">int</span> NewM<span class="token punctuation">,</span> <span class="token keyword">int</span> NewS<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Hour <span class="token operator">=</span> NewH<span class="token punctuation">;</span>    Minute <span class="token operator">=</span> NewM<span class="token punctuation">;</span>    Second <span class="token operator">=</span> NewS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作为类的成员函数，构造函数可以直接访问类的所有数据成员，可以是内联函数，可以带有参数表，可以带默认的形参值，也可以重载</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Clock</span><span class="token punctuation">{</span>  <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Clock</span> <span class="token punctuation">(</span><span class="token keyword">int</span> newH<span class="token punctuation">,</span> <span class="token keyword">int</span> newM<span class="token punctuation">,</span> <span class="token keyword">int</span> newS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造函数</span>    <span class="token function">Clock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//构造函数</span>         hour<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         minute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         second<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">int</span> newH<span class="token punctuation">,</span> <span class="token keyword">int</span> newM<span class="token punctuation">,</span> <span class="token keyword">int</span> newS<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">showTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> hour<span class="token punctuation">,</span>minute<span class="token punctuation">,</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//其他函数实现略</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Clock <span class="token function">c1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用有参数的构造函数</span>    Clock c2<span class="token punctuation">;</span> <span class="token comment">//调用无参数的构造函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-复制构造函数"><a href="#4-3-2-复制构造函数" class="headerlink" title="4.3.2 复制构造函数"></a>4.3.2 复制构造函数</h4><p>复制构造函数是一种特殊的构造函数，其形参为本类的对象的引用。<br>其作用是使用一个已经存在的对象（由复制构造函数的参数指定），去初始化同类的一个新对象。<br>如果没有定义类的复制构造函数，系统就会在必要时自动生成一个隐含的复制构造函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>   <span class="token keyword">public</span><span class="token operator">:</span>       <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> xx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> yy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//构造函数</span>          X<span class="token operator">=</span>xx<span class="token punctuation">;</span> Y<span class="token operator">=</span>yy<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token function">Point</span><span class="token punctuation">(</span>Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//复制构造函数</span>       <span class="token keyword">int</span> <span class="token function">GetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> X<span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token keyword">int</span> <span class="token function">GetY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> Y<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token keyword">private</span><span class="token operator">:</span>       <span class="token keyword">int</span>  X<span class="token punctuation">,</span>Y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//复制构造函数的实现</span><span class="token class-name">Point</span><span class="token operator">::</span><span class="token function">Point</span><span class="token punctuation">(</span>Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>      X<span class="token operator">=</span>p<span class="token punctuation">.</span>X<span class="token punctuation">;</span>      Y<span class="token operator">=</span>p<span class="token punctuation">.</span>Y<span class="token punctuation">;</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"Calling the copy constructor"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通构造函数是在对象创建时被调用，而复制构造函数在以下3种情况下都会被调用。</p><p>（1）当用类的一个对象去初始化该类的另一个对象时。例如</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Point <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Point <span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//用对象a初始化对象b，复制构造函数被调用</span>    Point c<span class="token operator">=</span>a<span class="token punctuation">;</span>   <span class="token comment">//用对象a初始化对象c，复制构造函数被调用</span>    cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>细节:以上对b和c的初始化都能够调用复制构造函数，两种写法只是形式上有所不同，执行的操作完全相同。</p><p>（2）如果函数的形参是类的对象，调用函数时，进行形参和实参结合时。例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>Point p<span class="token punctuation">)</span><span class="token punctuation">{</span>   cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   Point <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数的形参为类的对象，当调用函数时，复制构造函数被调用</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示：只有把对象用值传递时，才会调用复制构造函数，如果传递引用，则不会调用复制构造函数。<br>由于这一原因，传递比较大的对象时，传递引用会比传值的效率高很多。</p><p>（3）如果函数的返回值是类的对象，函数执行完成返回调用者时。例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Point <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       Point <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token comment">//函数的返回值是类对象，返回函数值时，调用复制构造函数</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   Point b<span class="token punctuation">;</span>    b<span class="token operator">=</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//       </span><span class="token punctuation">}</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么在这种情况下，返回函数值时，会调用复制构造函数呢？表面上函数g将a返回给了主函数，但是a是g（）的局部对象，离开建立它的函数g以后就消亡了，不可能在返回主函数后继续生存，所以在处理这种情况时编译系统会在主函数中创建一个无名临时对象，该临时对象的生存期只在函数调用所处的表达式中，也就是表达式”b=g（）”中。执行语句”return a，”时，实际上是调用复制构造函数将a的值复制到临时对象中。函数g运行结束时对象a消失，但临时对象会存在于表达式”b=g（）”中。计算完这个表达式后，临时对象的使命也就完成了，该临时对象便自动消失。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//4_2.cpp 复制构造函数的3种情况</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> xx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> yy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> xx<span class="token punctuation">;</span>y <span class="token operator">=</span> yy<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Point</span><span class="token punctuation">(</span>Point<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">gety</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Point</span><span class="token operator">::</span><span class="token function">Point</span><span class="token punctuation">(</span>Point<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> p<span class="token punctuation">.</span>x<span class="token punctuation">;</span>y <span class="token operator">=</span> p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Calling the copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//形参为Point类对象的函数</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span>Point p<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">getx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//返回值为Point类对象的函数</span>Point <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Point <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Point <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Point b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//情况一，用a初始化b。第一次调用复制构造函数</span>cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span><span class="token function">getx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">fun1</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//情况二，对象b作为fun1的实参。第二次调用复制构造函数</span>cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span><span class="token function">getx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//情况三，函数的返回值是类对象，函数返回时，调用复制构造函数</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3-析构函数"><a href="#4-3-3-析构函数" class="headerlink" title="4.3.3 析构函数"></a>4.3.3 析构函数</h4><p>简单来说，析构函数与构造函数的作用几乎正好相反，它用来完成对象被删除前的一些清理工作，也就是专门做扫尾工作的。析构函数是在对象的生存期即将结束的时刻被<strong>自动调用</strong>的。它的调用完成之后，对象也就消失了，相应的内存空间也被释放。<br>与构造函数一样，析构函数通常也是类的一个公有函数成员，它的名称是由<strong>类名前面加“~”</strong>构成，没有返回值。和构造函数不同的是析构函数不接收任何参数，但可以是虚函数（将在第8章介绍）。如果不进行显式说明，系统也会生成一个函数体为空的隐含析构函数。<br>如果希望程序在对象被删除之前的时刻自动（不需要人为进行函数调用）完成某些事情，就可以把它们写到析构函数中。</p><h4 id="4-3-4-程序实例"><a href="#4-3-4-程序实例" class="headerlink" title="4.3.4 程序实例"></a>4.3.4 程序实例</h4><p>例题：游泳池改造预算，Circle类<br>一圆型游泳池如图所示，现在需在其周围建一圆型过道，并在其四周围上栅栏。栅栏价格为35元/米，过道造价为20元/平方米。过道宽度为3米，游泳池半径由键盘输入。要求编程计算并输出过道和栅栏的造价。<br><img src="/images/cpp/862591-20200301235232229-39158544.png" alt=""></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//4_3.cpp 游泳池改造预算</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">float</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">float</span> FENCE_PRICE <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">float</span> CONCRETE_PRICE <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>                              <span class="token comment">//声明类Circle 及其数据和方法</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token keyword">float</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//构造函数</span>    <span class="token keyword">float</span> <span class="token function">circumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//圆周长</span>    <span class="token keyword">float</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//园面积</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">float</span> radius<span class="token punctuation">;</span>                           <span class="token comment">//圆半径</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 类的实现</span><span class="token comment">// 构造函数初始化数据成员radius</span><span class="token class-name">Circle</span><span class="token operator">::</span><span class="token function">Circle</span><span class="token punctuation">(</span><span class="token keyword">float</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    radius <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 计算圆的周长</span><span class="token keyword">float</span> <span class="token class-name">Circle</span><span class="token operator">::</span><span class="token function">circumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> PI <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 计算圆的面积</span><span class="token keyword">float</span> <span class="token class-name">Circle</span><span class="token operator">::</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">float</span> radius<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter the radius of the pool: "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> radius<span class="token punctuation">;</span>    Circle <span class="token function">Pool</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//游泳池边界对象</span>    Circle <span class="token function">PoolRim</span><span class="token punctuation">(</span>radius <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//栅栏对象</span>    <span class="token comment">// 计算栅栏造价并输出</span>    <span class="token keyword">float</span> fenceCost <span class="token operator">=</span> PoolRim<span class="token punctuation">.</span><span class="token function">circumference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> FENCE_PRICE<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Fencing Cost is $"</span> <span class="token operator">&lt;&lt;</span> fenceCost <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">//  计算过道造价并输出</span>    <span class="token keyword">float</span> concreteCost <span class="token operator">=</span> <span class="token punctuation">(</span>PoolRim<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> Pool<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>CONCRETE_PRICE<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Concrete Cost is $"</span> <span class="token operator">&lt;&lt;</span> concreteCost <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-类的组合"><a href="#4-4-类的组合" class="headerlink" title="4.4 类的组合"></a>4.4 类的组合</h3><p>在面向对象程序设计中，可以对复制对象进行分解，抽象，把一个复制对象分解为简单对象的组合</p><h4 id="4-4-1-组合"><a href="#4-4-1-组合" class="headerlink" title="4.4.1 组合"></a>4.4.1 组合</h4><p>当创建类的对象时，如果这个类具有内嵌对象成员，那么各个内嵌对象将首先被自动创建。在创建对象时既要对本类的基本类型数据进行初始化，又要对内嵌对象成员进行初始化。<br>构造函数的调用顺序如下：<br>（1）调用内嵌对象的构造函数，调用顺序按照内嵌对象在组合类的定义中出现的次序<br>（2）执行本类构造函数的函数体<br>析构函数的调用执行顺序与构造函数刚好相反</p><center><span style="color:blue;font-size:15px">2021/1/6</span></center><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//4_4.cpp 类的组合，线段（line）类</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//Point类定义</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> xx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> yy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> xx<span class="token punctuation">;</span>y <span class="token operator">=</span> yy<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Point</span><span class="token punctuation">(</span>Point<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Point</span><span class="token operator">::</span><span class="token function">Point</span><span class="token punctuation">(</span>Point<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> p<span class="token punctuation">.</span>x<span class="token punctuation">;</span>y <span class="token operator">=</span> p<span class="token punctuation">.</span>y<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Calling the copy constructor of Point"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//类的组合</span><span class="token keyword">class</span> <span class="token class-name">Line</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Line</span><span class="token punctuation">(</span>Point xp1<span class="token punctuation">,</span> Point xp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Line</span><span class="token punctuation">(</span>Line<span class="token operator">&amp;</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>Point p1<span class="token punctuation">,</span> p2<span class="token punctuation">;</span><span class="token keyword">double</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//组合类的构造函数</span><span class="token class-name">Line</span><span class="token operator">::</span><span class="token function">Line</span><span class="token punctuation">(</span>Point xp1<span class="token punctuation">,</span> Point xp2<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">p1</span><span class="token punctuation">(</span>xp1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p2</span><span class="token punctuation">(</span>xp2<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Calling constructor of Line"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p2<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p2<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//组合类的复杂构造函数</span><span class="token class-name">Line</span><span class="token operator">::</span><span class="token function">Line</span><span class="token punctuation">(</span>Line<span class="token operator">&amp;</span> l<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">p1</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">p2</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Callint the copy constructor of Line"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>len <span class="token operator">=</span> l<span class="token punctuation">.</span>len<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Point <span class="token function">myp1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myp2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Line <span class="token function">line</span><span class="token punctuation">(</span>myp1<span class="token punctuation">,</span> myp2<span class="token punctuation">)</span><span class="token punctuation">;</span>Line <span class="token function">line2</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The length of the line is: "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> line<span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The length of the line2 is: "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> line2<span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp/image-20210106101543263.png" alt="运行结果"></p><h4 id="4-4-2-向前引用声明"><a href="#4-4-2-向前引用声明" class="headerlink" title="4.4.2 向前引用声明"></a>4.4.2 向前引用声明</h4><p>如果遇到两个类相互引用的情况，应使用前向引用声明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Fred</span><span class="token punctuation">;</span><span class="token comment">//前向引用声明</span>  <span class="token keyword">class</span> <span class="token class-name">Barney</span> <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span>   <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     x<span class="token punctuation">.</span><span class="token function">yabbaDabbaDo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//错误：Fred类的对象在定义之前被使用</span>   <span class="token punctuation">}</span> <span class="token keyword">private</span><span class="token operator">:</span>   Fred <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>   <span class="token comment">//正确，经过前向引用声明，可以声明Fred类的对象指针</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Fred</span> <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span>   <span class="token keyword">void</span> <span class="token function">yabbaDabbaDo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>   Barney <span class="token operator">&amp;</span>y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器在编译时会指出错误，因为在类Barney的内联函数中使用了由x所指向的Fred类的对象，而此时Fred类尚未被完整地定义。解决这个问题的方法是，更改这两个类的定义次序，或者将函数method()改为非内联形式，并且在类Fred的完整定义之后，再给出函数的定义。</p><p><strong>注意</strong>：当使用前向引用声明时，只能使用被声明的符号，而不能涉及类的任何细节。</p><h3 id="4-5-UML图形标识"><a href="#4-5-UML图形标识" class="headerlink" title="4.5 UML图形标识"></a>4.5 UML图形标识</h3><p>UML语言是一个复杂、庞大的系统建模语言，其目标是希望能够解决整个面向对象软件开发过程中的可视化建模。</p><h4 id="4-5-1-UML简介"><a href="#4-5-1-UML简介" class="headerlink" title="4.5.1 UML简介"></a>4.5.1 UML简介</h4><p>统一建模语言UML ( Unified Modeling Language)</p><p>UML语言是一种典型的面向对象建模语言，而不是一种编 程语言，在UMI语言中用符号描述概念，概念间的关系描述为连接符号的线。</p><p>标准建模语言UML的重要内容是各种类型的图形，分别描述软件模型的静态结构、动态行为及模块组织和管理。本书主要使用UML中的图形来描述软件中类和对象以及它们的静态关系，使用了最基本的类图(classdiagram)，它属于静态结构图(staticstructure diagrams)的一种。</p><h4 id="4-5-2-UML类图"><a href="#4-5-2-UML类图" class="headerlink" title="4.5.2 UML类图"></a>4.5.2 UML类图</h4><p>1.类和对象</p><p><img src="/images/cpp/image-20210106124232727.png" alt="UML类图例"></p><p>2.几种关系的图形标识</p><p>（1）依赖关系</p><p><img src="/images/cpp/image-20210106124626064.png" alt="依赖关系"></p><p>（2）作用关系——关联</p><p><img src="/images/cpp/image-20210106124647931.png" alt="关联关系"></p><p>（3）包含关系——聚集和组合</p><p><img src="/images/cpp/image-20210106125143796.png" alt="包含关系"></p><p>（4）继承关系——泛化</p><p><img src="/images/cpp/image-20210106125427699.png" alt="继承关系"></p><h3 id="4-6-结构和结构体"><a href="#4-6-结构和结构体" class="headerlink" title="4.6 结构和结构体"></a>4.6 结构和结构体</h3><h4 id="4-6-1-结构体"><a href="#4-6-1-结构体" class="headerlink" title="4.6.1 结构体"></a>4.6.1 结构体</h4><p>结构体是一种特殊的类。结构体和类的唯一区别在于：在类中，对于未指定任何访问控制属性的成员，其访问控制属性为私有类型；在结构体中，对于未指定任何访问控制属性的成员，其访问控制属性为公有类型；</p><p>类和结构体的并存，是由历史原因（保持和c程序的兼容性）造成的，如果完全不使用结构体，也丝毫不会影响程序的表达能力。</p><h4 id="4-6-2-联合体"><a href="#4-6-2-联合体" class="headerlink" title="4.6.2 联合体"></a>4.6.2 联合体</h4><p>联合体是一种特殊形态的类，它的默认控制属性也是公共类型的，联合体的全部数据成员共享同一组内存单元。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">union</span> Mark <span class="token punctuation">{</span>    <span class="token keyword">char</span> grade<span class="token punctuation">;</span>    <span class="token keyword">bool</span> pass<span class="token punctuation">;</span>    <span class="token keyword">int</span> percent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp/image-20210106190029141.png" alt="联合体"></p><p>正是由于联合体的成员共用同样的内存单元，联合体变量中的成员同时至多只有一个是有意义的</p><p>联合体也可以补声明名称，称为无名联合体，可以由成员项的名字直接访问。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//4_8.cpp 使用联合体保存成绩信息，并且输出</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ExamInfo</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">ExamInfo</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">char</span> grade<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mode</span><span class="token punctuation">(</span>GRADE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">grade</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">ExamInfo</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">bool</span> psss<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mode</span><span class="token punctuation">(</span>PASS<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pass</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">ExamInfo</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> percent<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mode</span><span class="token punctuation">(</span>PERCENTAGE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">percent</span><span class="token punctuation">(</span>percent<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>string name<span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>GRADE<span class="token punctuation">,</span>PASS<span class="token punctuation">,</span>PERCENTAGE<span class="token punctuation">}</span>mode<span class="token punctuation">;</span><span class="token keyword">union</span> <span class="token punctuation">{</span><span class="token keyword">char</span> grade<span class="token punctuation">;</span><span class="token keyword">bool</span> pass<span class="token punctuation">;</span><span class="token keyword">int</span> percent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">ExamInfo</span><span class="token operator">::</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> GRADE<span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> grade<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> PASS<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>pass <span class="token operator">?</span> <span class="token string">"PASS"</span> <span class="token operator">:</span> <span class="token string">"FAIL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> PERCENTAGE<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> percent<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ExamInfo <span class="token function">course1</span><span class="token punctuation">(</span><span class="token string">"English"</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ExamInfo <span class="token function">course2</span><span class="token punctuation">(</span><span class="token string">"Calculus"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ExamInfo <span class="token function">course3</span><span class="token punctuation">(</span><span class="token string">"C++ Programming"</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>course1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> course2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>course3<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp/image-20210106192518724.png" alt="运行结果"></p><h3 id="4-7-综合实例——个人银行账户管理系统"><a href="#4-7-综合实例——个人银行账户管理系统" class="headerlink" title="4.7 综合实例——个人银行账户管理系统"></a>4.7 综合实例——个人银行账户管理系统</h3><h4 id="4-7-2-源程序及说明"><a href="#4-7-2-源程序及说明" class="headerlink" title="4.7.2 源程序及说明"></a>4.7.2 源程序及说明</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//4_9.cpp 个人银行账户管理系统</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SavingsAccount</span> <span class="token punctuation">{</span><span class="token comment">//储蓄账户类</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment">//账户</span><span class="token keyword">double</span> balance<span class="token punctuation">;</span><span class="token comment">//余额</span><span class="token keyword">double</span> rate<span class="token punctuation">;</span><span class="token comment">//存款的年利率</span><span class="token keyword">int</span> lastDate<span class="token punctuation">;</span><span class="token comment">//上次变更余额的时间</span><span class="token keyword">double</span> accumulation<span class="token punctuation">;</span><span class="token comment">//余额按日累加之和</span><span class="token comment">//记录一笔账，date为日期，amount为金额，desc为说明</span><span class="token keyword">void</span> <span class="token function">record</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得到指定日期为止的存款金额按日累积值</span><span class="token keyword">double</span> <span class="token function">accumulate</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> accumulation <span class="token operator">+</span> balance <span class="token operator">*</span> <span class="token punctuation">(</span>date <span class="token operator">-</span> lastDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">SavingsAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">double</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> id<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> balance<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">getRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rate<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存入现金</span><span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取出现金</span><span class="token comment">//结算利息，每年1月1日调用一次该函数</span><span class="token keyword">void</span> <span class="token function">settle</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示账户信息</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">SavingsAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">double</span> rate<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">balance</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rate</span><span class="token punctuation">(</span>rate<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lastDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">accumulation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> date <span class="token operator">&lt;&lt;</span> <span class="token string">"\t#"</span> <span class="token operator">&lt;&lt;</span> id <span class="token operator">&lt;&lt;</span> <span class="token string">"is created"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>accumulation <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>lastDate <span class="token operator">=</span> date<span class="token punctuation">;</span>amount <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>amount <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//保留小数点后两位</span>balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> date <span class="token operator">&lt;&lt;</span> <span class="token string">"\t#"</span> <span class="token operator">&lt;&lt;</span> id <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> amount <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> balance <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">record</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Error:not enough money"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">record</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token operator">-</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">settle</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">double</span> interest <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">*</span> rate <span class="token operator">/</span> <span class="token number">365</span><span class="token punctuation">;</span><span class="token comment">//计算年息</span><span class="token keyword">if</span> <span class="token punctuation">(</span>interest <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">record</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> interest<span class="token punctuation">)</span><span class="token punctuation">;</span>accumulation <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"#"</span> <span class="token operator">&lt;&lt;</span> id <span class="token operator">&lt;&lt;</span> <span class="token string">"\tBalance:"</span> <span class="token operator">&lt;&lt;</span> balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>SavingsAccount <span class="token function">sa0</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21325302</span><span class="token punctuation">,</span> <span class="token number">0.015</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SavingsAccount <span class="token function">sa1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">58320212</span><span class="token punctuation">,</span> <span class="token number">0.015</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sa0<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sa1<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sa0<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">5500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sa1<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开户后第90天到了银行的计息日，结算所有账户的年息</span>sa0<span class="token punctuation">.</span><span class="token function">settle</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sa1<span class="token punctuation">.</span><span class="token function">settle</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出各个账户信息</span>sa0<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>sa1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp/image-20210106201828486.png" alt="输出结果"></p><center><span style="color:blue;font-size:15px">2021/1/7</span></center><h3 id="4-8-深度探索"><a href="#4-8-深度探索" class="headerlink" title="4.8 深度探索"></a>4.8 深度探索</h3><h4 id="4-8-1-位域"><a href="#4-8-1-位域" class="headerlink" title="4.8.1 位域"></a>4.8.1 位域</h4><p>位域是一种允许将类的多个数据成员打包，从而使不同的成员可以共享相同的字节的机制<br>只有bool、char、int、enum的成员才能被定义为位域<br>位域虽然节省了内存空间，但由于打包和解包的过程中需要耗费额外的操作，所以运行时间可能会增加</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token class-name">Level</span><span class="token punctuation">{</span>FRTSHMEN<span class="token punctuation">,</span>SOPHOMORE<span class="token punctuation">,</span>JUNIOR<span class="token punctuation">,</span>SENIOR<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">Grade</span><span class="token punctuation">{</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>D<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">unsigned</span> number <span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">;</span>Level level <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>Grade grade <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果用整型存储学号（占用4字节）用枚举型存储年级和等级（各至少占用1字节）<br>而用位域，则需要27+2+2=31个二进制位看，只需要4个字节就能放下</p><h4 id="4-8-2-用构造函数定义类型转换"><a href="#4-8-2-用构造函数定义类型转换" class="headerlink" title="4.8.2 用构造函数定义类型转换"></a>4.8.2 用构造函数定义类型转换</h4><h5 id="1-用构造函数定义的类型转换"><a href="#1-用构造函数定义的类型转换" class="headerlink" title="1.用构造函数定义的类型转换"></a>1.用构造函数定义的类型转换</h5><p>2.2.5小节已经介绍了基本数据类型的类型转换。事实上，用户也可以为类类型定义类型转换。</p><p>4.3.2小节曾经介绍，当一个函数的返回类型为类类型时，函数调用返回后，一个无名的临时对象会被创建,这种创建不是由用户显式指定的，而是隐含发生的，事实上，临时对象也可以显式创建,方法是直接使用类名调用这个类的构造函数。例如，如果希望使用例4-4中定义的Point 和Line两个类计算一个线段的长度，可以不创建有名的点对象和线段对象，而使用这种方式:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout<span class="token operator">&lt;&lt;</span><span class="token function">Line</span><span class="token punctuation">(</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>其实这正是类型转换——将整型数据类型转换为Point型对象的显式类型转换</strong><br>C++中可以通过构造函数，来自定义类型之间的转换。一个构造函数，只要可以用一个参数调用，那么它就设定了一种从参数类型到这个类类型的类型转换。由于是类型转换，所以上面一行代码，还可以写成下面两种等效形式:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout<span class="token operator">&lt;&lt;</span><span class="token function">Line</span><span class="token punctuation">(</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout<span class="token operator">&lt;&lt;</span><span class="token function">Line</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>Point<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>Point<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的类型转换操作符可以省去，因为默认情况下，类的构造函数所规定的类型转换，允许通过隐含类型转换进行。也就是说，可以写成这种形式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout<span class="token operator">&lt;&lt;</span><span class="token function">Line</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-只允许显式执行的类型转换"><a href="#2-只允许显式执行的类型转换" class="headerlink" title="2.只允许显式执行的类型转换"></a>2.只允许显式执行的类型转换</h5><p>只要在构造函数前加上explicit关键字，以这个构造函数定义的类型转换，只能通过显式转换的方式完成。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">explicit</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> xx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> yy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-8-3-对象作为函数参数和返回值的传递方法"><a href="#4-8-3-对象作为函数参数和返回值的传递方法" class="headerlink" title="4.8.3 对象作为函数参数和返回值的传递方法"></a>4.8.3 对象作为函数参数和返回值的传递方法</h4><p>函数调用时传递基本类型的数据是通过运行栈，传递对象也一样是通过运行栈。运行栈中，在主调函数和被调函数之间，有一块二者都要访问的公共区域，主调函数把实参值写入其中，函数调用发生后，被调函数通过读取这段区域就可得到形参值。需要传递的对象，只要建立在运行栈的这段区域上即可。传递基本类型数据与传递对象的不同之处在于，将实参值复制到这段区域上时，对于基本数据类型的参数，做一般的内存写操作即可，但对于对象参数，则需要调用复制构造函数。例如，例4-2之中，在main函数中调用下面这个函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">fun1</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用它时，就需要调用Point的复制构造函数，使用对象b在运行栈的传参区域上构造一个临时对象。</p><p><img src="/images/cpp/image-20210107131230507.png" alt="传递方法"></p><h2 id="第5章-数据的共享与保护"><a href="#第5章-数据的共享与保护" class="headerlink" title="第5章 数据的共享与保护"></a>第5章 数据的共享与保护</h2><h3 id="5-1-标识符的作用域与可见性"><a href="#5-1-标识符的作用域与可见性" class="headerlink" title="5.1 标识符的作用域与可见性"></a>5.1 标识符的作用域与可见性</h3><h4 id="5-1-1-作用域"><a href="#5-1-1-作用域" class="headerlink" title="5.1.1 作用域"></a>5.1.1 作用域</h4><p>作用域是一个标识符在程序正文中有效的区域</p><p><strong>1.函数原型作用域</strong><br>C++程序中最小的作用域，在函数原型声明时形式参数的作用范围就是函数原型作用域。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标识符radius的作用范围就这函数area形参列表的左右括号之间</p><p><strong>2.局部作用域</strong><br>具有局部作用域的变量也称为局部变量</p><p><strong>3.类作用域</strong></p><p>类可以被看成是一组有名成员的集合，类X的成员m具有类作用域，对m的访向式有如下3种。<br>（1）如果在x的成员函数中没有声明同名的局部作用域标识符,那么在该函数内可以直接访问成员m。也就是说m在这样的函数中都起作用。<br>（2）通过表达式义X.m或者X::m。这正是程序中访间对象成员的最基本方法。X::m的方式用于访问类的静态成员，相关内容将在5.3节介绍。<br>（3）通过ptr-&gt;m这样的表达式，其中ptr为指向X类的一个对象的指针。关于指针将在第6章详细介绍。</p><p><strong>4.命名空间作用域</strong><br>不同模块的类和函数之间可能发生重名，这样就会引发错误，命名空间用来消除歧义。<br>在命名空间内可以直接引用当前命名空间中声明的标识符，如果需要引用其他命名空间的标识符，需要使用下面的语法：</p><pre class="line-numbers language-none"><code class="language-none">命名空间名::标识符名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有时这样使用会过于冗长，为了解决这一问题，C++又提供了using语句：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> 命名空间名<span class="token operator">::</span>标识符名<span class="token keyword">using</span> <span class="token keyword">namespace</span> 命名空间名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>前一种形式将指定的标识符暴露在当前的作用域内；<br>后一种形式将指定命名空间内的所有标识符暴露在当前的作用域内。<br>C++标准程序库的所有标识符都被声明在std命名空间内，如果去掉了using namespace std这条语句，则引用相应的标识符需要使用std::cin、std::cout、std::endl这样的语法。<br>命名空间也允许嵌套。<br>此外，还有两类特殊的命名空间——全局命名空间和匿名命名空间。全局命名空间空间是默认的命名空间，在显式命名空间之外的标识符都在一个全局命名空间中，匿名命名空间是一个需要显式声明的没有名字的命名空间，声明方法如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span><span class="token punctuation">{</span>匿名命名空间内的各种声明（函数声明、类声明）<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在包含多个源文件的工程中，匿名命名空间常常被用来屏蔽不希望暴露给其他源文件的标识符，这是因为每个源文件的匿名命名空间是彼此不同的，在一个源文件中没有办法访问其他源文件的匿名命名空间。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//5_1.cpp 作用域实例</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//在全局命名空间内的全局变量</span><span class="token keyword">namespace</span> Ns <span class="token punctuation">{</span><span class="token keyword">int</span> j<span class="token punctuation">;</span><span class="token comment">//在Ns命名空间中的全局变量</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>Ns<span class="token operator">::</span>j <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token comment">//子块1</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Ns<span class="token punctuation">;</span><span class="token comment">//使得在当然块中可以直接引用Ns命名空间的标识符</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//局部变量，局部作用域</span>i <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i="</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//输出7</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"j="</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//输出6</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i="</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//输出5</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量j也具有命名空间作用域，他被声明在命名空间Ns中；<br><strong>具有命名空间作用域的变量也称为全局变量</strong></p><h4 id="5-1-2-可见性"><a href="#5-1-2-可见性" class="headerlink" title="5.1.2 可见性"></a>5.1.2 可见性</h4><p> 程序运行到某一点，能够引用到的标识符，就是该处可见的标识符。</p><h3 id="5-2-对象的生存期"><a href="#5-2-对象的生存期" class="headerlink" title="5.2 对象的生存期"></a>5.2 对象的生存期</h3><p>对象从诞生到结束的这段时间就是它的生存期</p><h4 id="5-2-1-静态生存期"><a href="#5-2-1-静态生存期" class="headerlink" title="5.2.1 静态生存期"></a>5.2.1 静态生存期</h4><p>如果对象的生存期与程序的运行期相同，则称它具有静态生存期。在命名空间作用域中声明的对象都是具有静态生存期的。如果在函数内部的局部作用域中声明具有静态生存期的对象，则要使用关键字<strong>static</strong><br>在定义静态变量的同时也可以为它赋初值，例如</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这表示i会被赋值5初始化，而非每次执行函数时都将i赋值为5</p><h4 id="5-2-2-动态生存期"><a href="#5-2-2-动态生存期" class="headerlink" title="5.2.2 动态生存期"></a>5.2.2 动态生存期</h4><p>除了上述两种情况，其余的对象都具有动态生存期</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//5_2.cpp 变量的生存期与可见性</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//i为全局变量,具有静态生存期</span><span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//a, b为静态局部变量,具有全局寿命,局都可见,只第一次进入函数时被初始化</span><span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token comment">//c为局部变量,具有动态生存期，每次进入函数时都初始化</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span>c <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--- OTHER---"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" i: "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" c: "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//a为静态局都变量,具有全局寿命,局都可见</span><span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//b, c为局都变量，具有动态生存期</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---MAIN---"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" i: "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" c: "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>c <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---MAIN---"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" i: "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" a: "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b: "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" c: "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>i <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-类的静态成员"><a href="#5-3-类的静态成员" class="headerlink" title="5.3 类的静态成员"></a>5.3 类的静态成员</h3><h4 id="5-3-1-静态数据成员"><a href="#5-3-1-静态数据成员" class="headerlink" title="5.3.1 静态数据成员"></a>5.3.1 静态数据成员</h4><p>面向对象方法中还有“类属性”的概念。如果某个属性为整个类所共有，不属于任何个具体对象，则采用static 关键字来声明为静态成员。<br>静态数据成员具有静态生存期，由于静态数据成员不属于任何一个对象，因此可以通过类名对它进行访问，一般的用法息”类名::标识特”。在类的定义中仅仅对静态数据成员进行引用性声明，必须在命名空同作用域的某个地方使用类名限定性声明，这时也可以进行初始化。<br><strong>提示：</strong>之所以类的静态数据成员需要在类定义之外再加以定义，是因为需要以这种方式专门为它们分配空间。非静态数据成员无须以此方式定义，因为它们的空间是与它们所属对象的空间同时分配的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> x，y<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Point<span class="token operator">::</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//静态数据成员定义和初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-2-静态函数成员"><a href="#5-3-2-静态函数成员" class="headerlink" title="5.3.2 静态函数成员"></a>5.3.2 静态函数成员</h4><p>所谓静态成员函数就是使用static关键字声明的函数成员。同静态数据成员一样，静态成员函数也属于整个类，由同一个类的所有对象共同拥有，为这些对象所共享。<br>静态成员函数可以通过类名或对象名调用，而非静态成员函数只能通过对象名来调用。<br>静态成员函数可以直接访问该类的静态数据和函数成员。而访问非静态成员，必须通过对象名。</p><h3 id="5-4-类的友元"><a href="#5-4-类的友元" class="headerlink" title="5.4 类的友元"></a>5.4 类的友元</h3><p>友元关系提供了不同类或对象的成员函数之间、类的成员函数与一般函数之间进行数据共享的机制。<br>在一个类中,可以利用关键字friend 将其他函数或类声明为友元。如果友元是一般函数或类的成员函数，称为友元函数；如果友元是一个类 ，则称为友元类，友元类的所有成员函数都自动成为友元函数。</p><h4 id="5-4-1-友元函数"><a href="#5-4-1-友元函数" class="headerlink" title="5.4.1 友元函数"></a>5.4.1 友元函数</h4><p>友元函数是在类中用关键字friend修饰的非成员函数。友元函数可以是一个普通的函数，也可以是其他类的成员函数。虽然它不是本类的成员函数，但是在它的函数体中可以通过对象名访问类的私有和保护成员。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//5_6.cpp 使用友元函数计算两点间的距离</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token comment">//Point类定义</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">friend</span> <span class="token keyword">float</span> <span class="token function">dist</span><span class="token punctuation">(</span>Point<span class="token operator">&amp;</span> p1<span class="token punctuation">,</span> Point<span class="token operator">&amp;</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//友元函数声明</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">float</span> <span class="token function">dist</span><span class="token punctuation">(</span>Point<span class="token operator">&amp;</span> p1<span class="token punctuation">,</span> Point<span class="token operator">&amp;</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//友元函数实现</span><span class="token keyword">double</span> x <span class="token operator">=</span> p1<span class="token punctuation">.</span>x <span class="token operator">-</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token comment">//通过对象访问私有数据成员</span><span class="token keyword">double</span> y <span class="token operator">=</span> p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Point <span class="token function">myp1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myp2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The distance is: "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">dist</span><span class="token punctuation">(</span>myp1<span class="token punctuation">,</span> myp2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-2-友元类"><a href="#5-4-2-友元类" class="headerlink" title="5.4.2 友元类"></a>5.4.2 友元类</h4><p>同友元函数一样，一个类可以将另一个类声明为友元类。若A类为B类的友元类，则A类的所有成员函数都是B类的友元函数，都可以访问B类的私有和保护成员。声明友元类的语法形式为:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span>       <span class="token comment">//声明A为B的友元类  </span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关于友元，还有几点需要往意：<br><strong>第一</strong>，友元关系是不能传递的，B类是 A类的友元，C类是B类的友元，C类和A类之间，如果没有声明，就没有任何友元关系，不能进行数据共享。<br><strong>第二</strong>，友元关系是单向的。<br><strong>第三</strong>，友元关系是不被继承的，如果类B是类A的友元，类B的派生类并不会自动成为类A的友元。</p><h3 id="5-5-共享数据的保护"><a href="#5-5-共享数据的保护" class="headerlink" title="5.5 共享数据的保护"></a>5.5 共享数据的保护</h3><h4 id="5-5-1-常对象"><a href="#5-5-1-常对象" class="headerlink" title="5.5.1 常对象"></a>5.5.1 常对象</h4><p>常对象的数据成员值在对象的整个生存期间内不能被改变。也就是说，常对象必须进行初始化，而且不能被更新。</p><h4 id="5-5-2-用const修饰的类成员"><a href="#5-5-2-用const修饰的类成员" class="headerlink" title="5.5.2 用const修饰的类成员"></a>5.5.2 用const修饰的类成员</h4><p><strong>1.常成员函数</strong><br>使用const关键字修饰的函数为常成员函数，常成员函数声明的格式如下:<br>类型说明符 函数名(参数表) const;<br><strong>注意</strong>：<br>(1)const是函数类型的一个组成部分，因此在函数的定义部分也要带const关键字，<br>(2)如果将一个对象说明为常对象，则通过该常对象只能调用它的常成员函数，而不能调用其他成员函数(这就是C++从语法机制上对常对象的保护，也是常对象唯一的对外接口方式)。<br>(3)无论是否通过常对象调用常成员函数，在常成员函数调用期间，<strong>目的对象都被视同为常对象</strong>，因此常成员函数不能更新目的对象的数据成员，也不能针对目的对象调用该类中没有用const 修饰的成员函数(这就保证了在常成员函数中不会更改目的对象的数据成员的值)。<br>(4)const关键字可以用于对重载函数的区分。<br><strong>提示</strong>：<br>如果仅以const关键字为区分对成员函数重载，那么通过非const 的对象调用该函数，两个重载的函数都可以与之匹配，这时编译器将选择最近的重载函数——不带const关键字的函数。<br><strong>习惯</strong>：<br>在适当的地方使用const关键字，是能够提高程序质量的一个好习惯。对于无须改变对象状态的成员函数，都应当使用const。</p><p><strong>2.常数据成员</strong></p><p>就像一般数据一样，类的成员数据也可以是常量，使用const说明的数据成员为常数据成员。如果在一个类中说明了常数据成员，那么任何函数中都不能对该成员赋值。构造函数对该数据成员进行初始化，就只能通过初始化列表。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//5_8.cpp 常数据成员举例</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token comment">//静态常数据成员</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> A<span class="token operator">::</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//静态常数据成员在类外说明和初始化</span><span class="token comment">//常数据成员只能通过初始化列表来获得初值</span><span class="token class-name">A</span><span class="token operator">::</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">a</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>A <span class="token function">a1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">a2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a1<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a2<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/cpp/image-20210107224500388.png" alt="运行结果"></p><h4 id="5-5-3-常引用"><a href="#5-5-3-常引用" class="headerlink" title="5.5.3 常引用"></a>5.5.3 常引用</h4><p>如果在声明中引用const修饰，被声明的引用就是常引用。常引用所引用的对象不能被更新。<br>非const的引用只能绑定到普通的对象，而不能绑定到常对象，但常引用可以绑定到常对象。一个常引用，无论是绑定到一个普通的对象，还是常对象，通过该引用访问该对象时，都只能把该对象当作常对象。这意味着，对于基本数据类型的引用，则不能为数据赋值，对于类类型的引用，则不能修改它的数据成员，也不能调用它的非const的成员函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//5_9.cpp  在例5-6的基础上修改，使其中的dist函数的形参以常引用方式传递</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">friend</span> <span class="token keyword">float</span> <span class="token function">dist</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">float</span> <span class="token function">dist</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">double</span> x <span class="token operator">=</span> p1<span class="token punctuation">.</span>x <span class="token operator">-</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token keyword">double</span> y <span class="token operator">=</span> p1<span class="token punctuation">.</span>y <span class="token operator">-</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> Point <span class="token function">myp1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myp2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The distance is: "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">dist</span><span class="token punctuation">(</span>myp1<span class="token punctuation">,</span> myp2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>习惯：</strong>对于在函数中无须改变其值的参数，不宜使用普通引用方式传递，因为那会使得常对象无法被传入，因此传递常引用为宜。复制构造函数的参数一般也宜采用常引用传递。</p><h3 id="5-6-多文件结构和编译预处理指令"><a href="#5-6-多文件结构和编译预处理指令" class="headerlink" title="5.6 多文件结构和编译预处理指令"></a>5.6 多文件结构和编译预处理指令</h3><h4 id="5-6-1-C-程序的一般组织结构"><a href="#5-6-1-C-程序的一般组织结构" class="headerlink" title="5.6.1 C++程序的一般组织结构"></a>5.6.1 C++程序的一般组织结构</h4><p>到现在为止，已经学习了很多完整的C++源程序实例,分析它们的结构，基本上都是由3个部分来构成，类的定义、类的成员的实现和主函数，因为所举的例子都比较小，所有这3个部分都写在同一个文件中。在规模较大的项目中，往往需要多个源程序文件，每个源程序文件称为一个编译单元。这时C++语法要求一个类的定义必须出现在所有使用该类的编译单元中。比较好的，也是惯用的做法是将类的定义写在头文件中，使用该类的编译单元则包含这个头文件。通常一个项目至少划分为3个文件; 类定义文件(*.h文件)、类实现文件(*.cpp文件)和类的使用文件(*. cpp，主函数文件)。对于更为复杂的程序，每一个类都有单独的定义和实现文件。采用这样的组织结构，可以对不同的文件进行单独编写、编译，最后再连接，同时可以充分利用类的封装特性，在程序的调试、修改时只对其中某一个类的定义和实现进行修改，而其余部分不用改动。</p><p>分析整个源程序的结构，由3个单独的源文件构成，它们的相互关系和编译、连接过程可以用图5-8表示(这里是Windows操作系统的情形，UNIX操作系统中生成文件的后缀会有所不同)。</p><p><img src="/images/cpp/image-20210107234218610.png" alt="多文件组织结构图"></p><p>从图5-8可以看到，两个. cpp的文件被分别编译生成各自的目标文件. obj，然后再与系统的运行库共同连接生成可执行文件. exe。如果只修改了类的成员函数的实现部分，则只重新编译point. cpp并连接即可，其余的文件几乎可以连看都不用看。 如果是一个语句很多、规模特大的程序，效率就会得到显著的提高。</p><p>决定一个声明放在源文件中还是头文件中的一般原则是 ，将需要分配空间的定义放在源文件中，例如函数的定义(需要为函数代码分配空间)、命名空间作用域中变量的定义(需要为变量分配空间)等；而将不需要分配空间的声明放在头文件中，例如类声明、外部函数的原型声明、外都变量的声明(外部函数和外部变量将在5.6.2节中详细讨论、基本数据类型常量的声明等。内联函数比较特殊，由于它的内容需要嵌入到每个调用它的函数之中，所以对于那些需要被多个编译单元调用的内联函数，它们的代码应该被各个编译单元可见，这些内联函数的定义应当出现在头文件中。</p><h4 id="5-6-2-外部变量与外部函数"><a href="#5-6-2-外部变量与外部函数" class="headerlink" title="5.6.2 外部变量与外部函数"></a>5.6.2 外部变量与外部函数</h4><p><strong>1.外部变量</strong><br>如果一个变量除了在定义它的源文件中可以使用外。还能被其他文件使用，那么就称这个变成是外部变量。命名空间作用域中定义的变量，默认情况下都是外部变量，但在其他文件中如果需要使用这一变量，需要用extern关键字加以声明。</p><p>在命名空间作用域中，不用extern关键字声明的变量，都是定义性声明；用extern关键字声明的变量，如果同时指定了初值，则是定义性声明，否则是引用性声明。外部变量可以有多处声明，但是定义性声明只能是唯一的。</p><p><strong>2.外部函数</strong><br>在所有类之外声明的函数(也就是非成员函数)，都是具有命名空间作用域的，如果没有特殊说明，这样的函数都可以在不同的编译单元中被调用，只要在调用之前进行引用性声明(即声明函数原型)即可。当然，也可以在声明函数原型或定义函数时用extern修饰，其效果与不加修饰的默认状态是一样的。</p><p><strong>习惯：</strong>通常情况下 ,变量和函数的定义都放在源文件中，而对外部变量和外部函数的引用性声明则放在头文件中。</p><p><strong>3.将变量和函数限制在编译单元内</strong><br>命名空间作用域中声明的变量和函数，在默认情况下都可以被其他编译单元访问,但有时不希望一个源文件中定义的命名空间作用域的变量和函数被其他源文件引用。这种需求主要是出于两个原因，一是出于安全性考虑，不希望将—个只会在文件内使用的内部变量或函数暴露给其他编译单元，就像不希望暴露一个类的私有成员一样；二是,对于大工程来说，不同文件之中的、只在文件内使用的变量名很容易重名，如果将它们都暴露出来，在连接时很容易发生名字冲突。<br>对这问题，曾经的解决办法是，在定义这些变量和函数时使用static关键字。static关键字用来修饰命名空间作用域的变量或函数时， 和extern关键字起相反的作用，它会使得被static修饰的变此和函数无法被其他编译单元引用。</p><p><strong>提示：</strong>目前已经介绍了static 关键字的3种用法，当它用在局部作用域、类作用域和命名空间作用域时，具有不尽相同的作用。一个共同点是，凡是被static修饰的变量，都具有静态生存期(不管未使用static关键字时它们的生存期如何)。</p><p>现在取而代之的方式是使用匿名的命名空间。在匿名命名空间中定义的变量和函数都不会暴露给其他编译单元。</p><p><strong>习惯：</strong>应当将不希望被其他编译单元引用的函数和变量放在匿名的命名空间中。</p><center><span style="color:blue;font-size:15px">2021/1/8</span></center><h4 id="5-6-3-标准C-库"><a href="#5-6-3-标准C-库" class="headerlink" title="5.6.3 标准C++库"></a>5.6.3 标准C++库</h4><p>在C语言中，系统函数、系统的外部变量和一些宏定义都放置在运行库(run-timelibrary)中。C++的库中除继续保留了大部分c语言系统函数外，还加入了预定义的模板和类。标准C++ 类库是一个极为灵活并可扩展的可亚用软件模块的集合。标准C++类与组件在逻辑上分为如下6种类型。<br>。输入输出类;<br>。容器类与ADT(抽象数据类型);<br>。存储管理类;<br>。算法;<br>。错误处理;<br>。运行环境支持。</p><p>使用标准C++库时，还需要加入下面这一条语句来将指定命名空间中的名称引入到当前作用域中:<br>using namespace std;<br>如果不使用上述方法.就需要在使用srd命名空间中的标识符时冠以命名空间名’std::”。</p><p><strong>习惯：</strong>通常情况下，using namespace 语句不宜放在头文件中，因为这会使一个命名空间不被察觉地对一个源文件开放。</p><h4 id="5-6-4-编译预处理"><a href="#5-6-4-编译预处理" class="headerlink" title="5.6.4 编译预处理"></a>5.6.4 编译预处理</h4><p>在编译器对源程序进行编译之前。首先要由预处理器对程序文本进行预处理。所有的预处理指令在程序中都是以“#”来引导，每一条预处理指令单独占用一行，不要用分号结束。预处理指令可以根据需要出现在程序中的任何位置。</p><p><strong>1.#include 指令</strong></p><p><strong>2.#define 和 #undef指令</strong><br>在C++中虽然仍可以用#define定义符号常量，但是更好的方法是在类型说明语句中用const进行修饰。<br>在C语言中，还可以用#define来定义带参数宏，以实现简单的函数计算，但是在C++中这一功能已被内联函数取代。<br>用#define还可以定义空符号，目的是配合条件编译指令一起使用。<br>#undef的作用是删除由#undef定义的宏，使之不再起作用。</p><p><strong>3.条件编译指令</strong><br>使用条件编译指令，可以限定程序中的某些内容要在满足一定条件的情况下才参与编译。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression"><span class="token operator">/</span> #ifndef</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4.defined操作符</strong><br>defined是一个预处理操作符，而不是指令，因此不要以#开头。<br>#ifndef MYHEAD_H 与 #if!defined(MYHEAD_H) 完全等价</p><p>由于文件包含指令可以嵌套使用，在设计程序时要避免多次重复包含同一个文件，否则会引起变量及类的重复定义。可以在可能被重复包含的头文件中使用条件编译指令。用一个唯一的标识符来标记文件是否已参加过编译。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//head.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HEAD_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">HEAD_H</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><span style="color:blue;font-size:15px">2021/1/9</span></center><h3 id="5-7-综合实例——个人银行账户管理系统"><a href="#5-7-综合实例——个人银行账户管理系统" class="headerlink" title="5.7 综合实例——个人银行账户管理系统"></a>5.7 综合实例——个人银行账户管理系统</h3><p>对第四章的改进：<br>（1）在SavingsAccount类增加一个静态成员total，用来记录各个账户的总金额，并为其增加相应的静态函数成员getTotal用来对其进行访问。<br>（2）</p><p>例5-11 个人银行账户管理。<br>整个程序分为3个文件：account.h是类定义头文件，account.cpp是类实现文件，5_11.cpp是主函数文件。</p><p>对第四章的改进：<br>（1）在SavingsAccount类中增加了一个静态数据cyuantotal，用来记录各个账户的总金额，并为其增加相应的静态成员函数getTotal用来对其进行访问。<br>（2）诸如getBalance，accumulate这些不需要改变对象状态的成员函数声明为常成员函数。<br>（3）将SavingAccount类从主函数所在的源文件中分开，建立两个新的文件account.h和account.cpp分别存放SavingAccount类的定义和实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//account.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__ACCOUNT_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">__ACCOUNT_H__</span></span><span class="token keyword">class</span> <span class="token class-name">SavingsAccount</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">double</span> balance<span class="token punctuation">;</span><span class="token keyword">double</span> rate<span class="token punctuation">;</span><span class="token keyword">int</span> lastDate<span class="token punctuation">;</span><span class="token keyword">double</span> accumulation<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">double</span> total<span class="token punctuation">;</span><span class="token comment">//static所有账户的总金额</span><span class="token keyword">void</span> <span class="token function">record</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">accumulate</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token comment">//const</span><span class="token keyword">return</span> accumulation <span class="token operator">+</span> balance <span class="token operator">*</span> <span class="token punctuation">(</span>date <span class="token operator">-</span> lastDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">SavingsAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">double</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> id<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//const</span><span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> total<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//const</span><span class="token keyword">double</span> <span class="token function">getRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rate<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//const</span><span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> total<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//静态函数</span><span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">settle</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//const</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//__ACCOUNT_H__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//account.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"account.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">double</span> SavingsAccount<span class="token operator">::</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//给total赋初值</span><span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">SavingsAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">double</span> rate<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">balance</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rate</span><span class="token punctuation">(</span>rate<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lastDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">accumulation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> date <span class="token operator">&lt;&lt;</span> <span class="token string">"\t#"</span> <span class="token operator">&lt;&lt;</span> id <span class="token operator">&lt;&lt;</span> <span class="token string">"is created"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>accumulation <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>lastDate <span class="token operator">=</span> date<span class="token punctuation">;</span>amount <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>amount <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//保留小数点后两位</span>balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span>total <span class="token operator">+=</span> amount<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> date <span class="token operator">&lt;&lt;</span> <span class="token string">"\t#"</span> <span class="token operator">&lt;&lt;</span> id <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> amount <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> balance <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">record</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Error:not enough money"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">record</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token operator">-</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">settle</span><span class="token punctuation">(</span><span class="token keyword">int</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">double</span> interest <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">*</span> rate <span class="token operator">/</span> <span class="token number">365</span><span class="token punctuation">;</span><span class="token comment">//计算年息</span><span class="token keyword">if</span> <span class="token punctuation">(</span>interest <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">record</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> interest<span class="token punctuation">)</span><span class="token punctuation">;</span>accumulation <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"#"</span> <span class="token operator">&lt;&lt;</span> id <span class="token operator">&lt;&lt;</span> <span class="token string">"\tBalance:"</span> <span class="token operator">&lt;&lt;</span> balance<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"account.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>SavingsAccount <span class="token function">sa0</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21325302</span><span class="token punctuation">,</span> <span class="token number">0.015</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SavingsAccount <span class="token function">sa1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">58320212</span><span class="token punctuation">,</span> <span class="token number">0.015</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sa0<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sa1<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sa0<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">5500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sa1<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开户后第90天到了银行的计息日，结算所有账户的年息</span>sa0<span class="token punctuation">.</span><span class="token function">settle</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sa1<span class="token punctuation">.</span><span class="token function">settle</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出各个账户信息</span>sa0<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>sa1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Total: "</span> <span class="token operator">&lt;&lt;</span> <span class="token class-name">SavingsAccount</span><span class="token operator">::</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-8-深度探索"><a href="#5-8-深度探索" class="headerlink" title="5.8 深度探索"></a>5.8 深度探索</h3><h4 id="5-8-1-常成员函数的声明原则"><a href="#5-8-1-常成员函数的声明原则" class="headerlink" title="5.8.1 常成员函数的声明原则"></a>5.8.1 常成员函数的声明原则</h4><p>“对于那些不会改变<strong>对象状态</strong>的函数，都应定义为常函数”<br>这并不意味着不会改变非静态成员对象的成员函数，都不会改变对象状态。<br>如果有一个函数会改变某个成员的值，但它也未必会改变对象状态。<br>详情见课本p181<br>被mutable修饰的成员对象在任何时候都不会被视为常对象</p><h4 id="5-8-2-代码的编译连接与执行过程"><a href="#5-8-2-代码的编译连接与执行过程" class="headerlink" title="5.8.2 代码的编译连接与执行过程"></a>5.8.2 代码的编译连接与执行过程</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//a.cpp</span><span class="token keyword">extern</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    y<span class="token operator">=</span><span class="token function">func</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//b.cpp</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> v<span class="token operator">+</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.编译</strong><br>编译是对一个个源文件分别处理的，每个源文件构成了独立的编译单元，编译过程中不同的编译单元互不影响。目标文件主要描述程序在运行过程中需要放在内存中的内容，包括两大类——代码和数据。</p><p>代码段（.text）a.o中应当包含main函数的目标代码；b.o中应当包含func函数的代码；<br>数据段中包含对源文件中定义的各个<strong>静态生存期</strong>对象的描述，数据段又分为初始化的数据段（.data）和未初始化的数据段（.bss）</p><p>几个段的内容，都是该源文件中有定义的内容，那些只声明而未经定义的全局变量或函数并不在这几个段中。例如a.cpp中的y没有出现在a.o的数据段中，而func也没有出现在a.o的代码段中。<br>a.cpp的main函数改写了变量y的值，但y是在b.cpp中定义的，这种联系要通过变量或函数的名字来建立，他们存放在目标代码的符号表中。</p><p><img src="/images/cpp/image-20210109233258524.png" alt=""></p><p><strong>2.连接</strong></p><p>在连接期间，需要将各个编译单元的目标文件和运行库当中被调用的单元加以合并。结果合并后，不同编译单元的代码段和数据段就分别合并到一起了，程序在运行时代码和静态数据需要占据的内存空间就全部已知了，因此所有代码和数据都可以背分配确定的地址了。</p><p><strong>3.执行</strong></p><p>程序的执行，是以进程为单位的。程序只有在执行时才会生成进程，执行结束后进程会消失。<br>程序是存储在磁盘上的，在执行前，操作系统需要首先将它载入到内存中，并为它分配足够大的内存空间来容纳代码段和数据段，然后把文件中存放的代码段和初始化的数据段的内容载入其中。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C++语言设计指南（第4版） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好2021</title>
      <link href="2021/01/01/hi2021/"/>
      <url>2021/01/01/hi2021/</url>
      
        <content type="html"><![CDATA[<h3 id="triangular-flag-on-post-2021到了，去年留下了诸多遗憾，今年有更多的任务在等待，希望在新的一年可以得到提升，祝所有人新年快乐！！！"><a href="#triangular-flag-on-post-2021到了，去年留下了诸多遗憾，今年有更多的任务在等待，希望在新的一年可以得到提升，祝所有人新年快乐！！！" class="headerlink" title=":triangular_flag_on_post: 2021到了，去年留下了诸多遗憾，今年有更多的任务在等待，希望在新的一年可以得到提升，祝所有人新年快乐！！！"></a><span class="github-emoji"><span>🚩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 2021到了，去年留下了诸多遗憾，今年有更多的任务在等待，希望在新的一年可以得到提升，祝所有人新年快乐！！！</h3>]]></content>
      
      
      <categories>
          
          <category> 随心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora &amp; Mathjax使用文档</title>
      <link href="2020/12/31/typora-mathjax/"/>
      <url>2020/12/31/typora-mathjax/</url>
      
        <content type="html"><![CDATA[<p>Typora里面直接编写html代码，对hexo生效，但是如果直接改动Typora本身的css和html，则对hexo不生效</p><h2 id="1-字体编辑"><a href="#1-字体编辑" class="headerlink" title="1. 字体编辑"></a>1. 字体编辑</h2><h3 id="1-1-标题"><a href="#1-1-标题" class="headerlink" title="1.1 标题"></a>1.1 标题</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 一级标题        快捷键Ctrl+1</span><span class="token comment">## 二级标题       快捷键Ctrl+2</span><span class="token comment">### 三级标题      快捷键Ctrl+3</span><span class="token comment">#### 四级标题     快捷键Ctrl+4</span><span class="token comment">##### 五级标题    快捷键Ctrl+5</span><span class="token comment">###### 六级标题   快捷键Ctrl+6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-字体大小"><a href="#1-2-字体大小" class="headerlink" title="1.2 字体大小"></a>1.2 字体大小</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">快捷键：Ctrl+数字  或 Ctrl+加减号  或  ### （几个#表示几级标题，同上）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-字体加粗"><a href="#1-3-字体加粗" class="headerlink" title="1.3 字体加粗"></a>1.3 字体加粗</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">快捷键：Ctrl+b示 例：**加粗内容**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>加粗内容</strong></p><h3 id="1-4-斜体"><a href="#1-4-斜体" class="headerlink" title="1.4 斜体"></a>1.4 斜体</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">快捷键：ctrl+i示 例：*斜体*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示 例：<em>斜体</em></p><h3 id="1-5-删除线"><a href="#1-5-删除线" class="headerlink" title="1.5 删除线"></a>1.5 删除线</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">快捷键：alt+shift+5示 例：~~删除的内容~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示 例：<del>删除的内容</del></p><h3 id="1-6-下划线"><a href="#1-6-下划线" class="headerlink" title="1.6 下划线"></a>1.6 下划线</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">快捷键：Ctrl+u示 例：&lt;u&gt;下划线内容&lt;/u&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示 例：<u>下划线内容</u></p><h3 id="1-7-文本居中"><a href="#1-7-文本居中" class="headerlink" title="1.7 文本居中"></a>1.7 文本居中</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作：&lt;center&gt;居中内容&lt;/center&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作：</p><center>居中内容</center><p></p><h3 id="1-8-脚注"><a href="#1-8-脚注" class="headerlink" title="1.8 脚注"></a>1.8 脚注</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作：这块有个脚注[^脚注]     [^脚注]:填写脚注的内容示例：有一个github网址[^1]     [^1]:https://github.com/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例：有一个github网址<sup><a href="#fn_1" id="reffn_1">1</a></sup></p><h2 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a>2. 列表</h2><h3 id="2-1-有序列表"><a href="#2-1-有序列表" class="headerlink" title="2.1 有序列表"></a>2.1 有序列表</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作：数字+英文小数点(.)+空格示例：1. list1     2. list2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>list1<ol><li>list2</li></ol></li></ol><h3 id="2-2-无序列表"><a href="#2-2-无序列表" class="headerlink" title="2.2 无序列表"></a>2.2 无序列表</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作：- +空格 或 * + 空格示例： - list1      - list2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>list1<pre><code>- list2</code></pre></li></ul><h2 id="3-插入"><a href="#3-插入" class="headerlink" title="3. 插入"></a>3. 插入</h2><h3 id="3-1-插入代码块"><a href="#3-1-插入代码块" class="headerlink" title="3.1 插入代码块"></a>3.1 插入代码块</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">快捷键：shift+~~~（或直接```)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">,</span>num<span class="token punctuation">;</span>  <span class="token keyword">int</span> loopcnts <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>begin <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loopcnts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>res <span class="token operator">=</span> <span class="token function">SqrtByBisection</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mySqrt_binarysearch(%d) = %f, spent time is %f\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end<span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token operator">/</span>CLOCKS_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-插入数学公式"><a href="#3-2-插入数学公式" class="headerlink" title="3.2 插入数学公式"></a>3.2 插入数学公式</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作：$$ + enter示例：$$ + enter后输入11+12，结果如下所示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script type="math/tex; mode=display">11+12</script><h3 id="3-3-插入引用"><a href="#3-3-插入引用" class="headerlink" title="3.3 插入引用"></a>3.3 插入引用</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作：&gt; + 空格示例：&gt; + 空格后，输入 引用的内容，结果如下所示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>引用的内容</p></blockquote><h3 id="3-4-插入链接"><a href="#3-4-插入链接" class="headerlink" title="3.4 插入链接"></a>3.4 插入链接</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操 作:Ctrl+k弹出后，输入 [输入标题名](输入链接地址) 即可示 例1：[百度一下，你就知道](https://www.baidu.com/)示 例2：这是 [百度一下，你就知道](https://www.baidu.com/ "百度") 的链接.  示 例3：这是 [github][1] 的链接.         [1]: https://github.com/ "github"ps：按住ctrl点击链接可直接打开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://link.zhihu.com/?target=https%3A//www.baidu.com/">百度一下，你就知道</a></p><p>这是 <a href="https://link.zhihu.com/?target=https%3A//www.baidu.com/">百度一下，你就知道</a> 的链接.</p><p>这是 <a href="https://link.zhihu.com/?target=https%3A//github.com/">github</a> 的链接.</p><h3 id="3-5-插入注释"><a href="#3-5-插入注释" class="headerlink" title="3.5 插入注释"></a>3.5 插入注释</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作：[^文字]：文字示例：[^1]：文献1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><sup><a href="#fn_1" id="reffn_1">1</a></sup>：文献1</p><h3 id="3-6-插入表格"><a href="#3-6-插入表格" class="headerlink" title="3.6 插入表格"></a>3.6 插入表格</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">快捷键：ctrl+t示 例：按完快捷键后，弹出下图，选择对应的行和列，点击确定即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>2</td><td></td><td></td></tr><tr><td>3</td><td></td><td></td></tr><tr><td>4</td><td></td></tr></tbody></table></div><h3 id="3-7-插入图片"><a href="#3-7-插入图片" class="headerlink" title="3.7 插入图片"></a>3.7 插入图片</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作：直接拖动  或 ctrl+shift+i(相对路径地址)示例：![](C:\1.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/Typora &amp; Mathjax/v2-96d8a3b13676b08768ef4003478c0ade_720w.jpg" alt="img"></p><h3 id="3-8-插入分隔符"><a href="#3-8-插入分隔符" class="headerlink" title="3.8 插入分隔符"></a>3.8 插入分隔符</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作：--- + enter  或者 *** + enter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="3-9-插入表情"><a href="#3-9-插入表情" class="headerlink" title="3.9 插入表情"></a>3.9 插入表情</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">操作： ：+ 单词 +:示例： :smile:      :cry:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="3-10-插入目录"><a href="#3-10-插入目录" class="headerlink" title="3.10 插入目录"></a>3.10 插入目录</h3><pre class="line-numbers language-none"><code class="language-none">操作：[toc]+enter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[toc]</p><h3 id="3-11-公式内换行"><a href="#3-11-公式内换行" class="headerlink" title="3.11 公式内换行"></a>3.11 公式内换行</h3><pre class="line-numbers language-none"><code class="language-none">操作：\\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-12-公式内左对齐"><a href="#3-12-公式内左对齐" class="headerlink" title="3.12 公式内左对齐"></a>3.12 公式内左对齐</h3><pre class="line-numbers language-none"><code class="language-none">操作：在公式最开始加\begin{aligned}，然后每个等号前加&amp;，即&amp;=，每一行用\\换行，然后最后一句输完后\end{aligned}实例：$\begin{aligned}d(x,y)&amp;=\sqrt{(x_1-y_1)^2+(x_2-y_2)^2+\dots+(x_n-y_n)^2}\\&amp;=\sqrt{\sum_{i=1}^{n}{(x_i-y_i)^2}} \end{aligned}$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script type="math/tex; mode=display">\begin{aligned}d(x,y)&=\sqrt{(x_1-y_1)^2+(x_2-y_2)^2+\dots+(x_n-y_n)^2}\\&=\sqrt{\sum_{i=1}^{n}{(x_i-y_i)^2}} \end{aligned}</script><h3 id="3-13-矩阵表示"><a href="#3-13-矩阵表示" class="headerlink" title="3.13 矩阵表示"></a>3.13 矩阵表示</h3><pre class="line-numbers language-none"><code class="language-none">操作：`\begin{matrix}`和`\end{matrix}`说明在它们之间的是矩阵`1 &amp; 2 &amp; 3\\`表示第一行的元素，其中用`&amp;`来分割每一个元素，用`\\`来换行实例: \left[\begin{matrix} 1 &amp; 2 &amp; 3\\ 4 &amp; 5 &amp; 6 \end{matrix}\right]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>$\left[\begin{matrix} 1 &amp; 2 &amp; 3\\ 4 &amp; 5 &amp; 6 \end{matrix}\right]$</p><h3 id="3-14-希腊字母表示"><a href="#3-14-希腊字母表示" class="headerlink" title="3.14 希腊字母表示"></a>3.14 希腊字母表示</h3><p>$\partial$ \partial</p><p><img src="/images/Typora &amp; Mathjax/v2-68922903c83e504e3e3e4efd5b7327fa_720w.jpg" alt=""></p><h3 id="3-15-箭头表示"><a href="#3-15-箭头表示" class="headerlink" title="3.15 箭头表示"></a>3.15 箭头表示</h3><p><img src="/images/Typora &amp; Mathjax/v2-42ff8eb3a827056b16b2133f58009abe_720w.jpg" alt="img"></p><h3 id="3-16-公式大全"><a href="#3-16-公式大全" class="headerlink" title="3.16 公式大全"></a>3.16 公式大全</h3><p><img src="/images/Typora &amp; Mathjax/v2-2f57dd9499cba748a39be06d2104fe21_720w.jpg" alt="img"></p><h3 id="3-17-二进制运算-相关符号"><a href="#3-17-二进制运算-相关符号" class="headerlink" title="3.17 二进制运算/相关符号"></a>3.17 二进制运算/相关符号</h3><p><img src="/images/Typora &amp; Mathjax/v2-fd7827f7c554e1f2c6d9a356f868a0fe_720w.jpg" alt="img"></p><h3 id="3-18-空格表示"><a href="#3-18-空格表示" class="headerlink" title="3.18 空格表示"></a>3.18 空格表示</h3><p>在公式中如果需要有空格，可以用+空格的方式来实现</p><pre class="line-numbers language-none"><code class="language-none">实例：max \ a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$max \ a$</p><p>以上部分内容来自 <a href="https://zhuanlan.zhihu.com/p/90561228">https://zhuanlan.zhihu.com/p/90561228</a></p><hr><h2 id="4-杂项"><a href="#4-杂项" class="headerlink" title="4. 杂项"></a>4. 杂项</h2><h3 id="4-1-设置字体颜色大小等"><a href="#4-1-设置字体颜色大小等" class="headerlink" title="4.1 设置字体颜色大小等"></a>4.1 设置字体颜色大小等</h3><pre class="line-numbers language-none"><code class="language-none">由于Typora或者说markdown中没有直接的语法支持文字的颜色，大小，字体等属性的设置，就需要“曲线救国”，因为Typora支持内嵌html的语法，那么只要插入一条html代码即可:&lt;span style='color:文字颜色;background:背景颜色;font-size:文字大小;font-family:字体;'&gt;文字&lt;/span&gt;实例：&lt;span style='color:red;background:blue;font-size:30px;font-family:微软雅黑;'&gt;文字&lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span style="color:red;background:blue;font-size:30px;font-family:微软雅黑;">文字</span></p><h3 id="4-2-某种数学图的插入"><a href="#4-2-某种数学图的插入" class="headerlink" title="4.2 某种数学图的插入"></a>4.2 某种数学图的插入</h3><p><a href="https://www.intmath.com/cg3/embed-desmos.php">https://www.intmath.com/cg3/embed-desmos.php</a></p><iframe src="https://www.desmos.com/calculator/yx1lco5nog" width="100%" style="min-height:200px"></iframe><p>s</p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathjax </tag>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/29/hello-world/"/>
      <url>2020/12/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
